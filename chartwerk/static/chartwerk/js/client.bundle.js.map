{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","client.js","node_modules/marked/lib/marked.js","src/js/client.js","src/js/client/annotations.js","src/js/client/index.js","src/js/client/legend.js","src/js/client/size.js","src/js/client/text.js","src/js/constants/colors.js","src/js/misc/utils.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","global","Lexer","options","this","tokens","links","marked","defaults","rules","block","normal","gfm","tables","InlineLexer","inline","renderer","Renderer","breaks","pedantic","Parser","token","escape","html","encode","replace","unescape","_","toLowerCase","charAt","String","fromCharCode","parseInt","substring","regex","opt","source","self","name","val","RegExp","noop","merge","obj","target","key","arguments","Object","prototype","hasOwnProperty","src","callback","pending","highlight","lex","done","err","out","parse","type","text","lang","escaped","message","silent","newline","fences","hr","heading","nptable","lheading","blockquote","list","def","table","paragraph","bullet","item","_tag","lexer","top","bq","next","loose","cap","bull","b","space","exec","push","depth","header","split","align","cells","test","ordered","match","indexOf","smartLists","slice","join","sanitize","pre","sanitizer","href","title","charCodeAt","autolink","url","tag","link","reflink","nolink","strong","em","br","del","_inside","_href","output","mangle","inLink","outputLink","codespan","smartypants","image","ch","Math","random","toString","langPrefix","quote","level","raw","headerPrefix","xhtml","body","listitem","tablerow","content","tablecell","flags","prot","decodeURIComponent","parser","reverse","tok","pop","peek","parseText","row","cell","j","setOptions","inlineLexer","define","amd","window","2","_interopRequireDefault","__esModule","default","_index","_index2","render","./client/index.js","3","defineProperty","value","werk","chartwerk","chart","$","css","position","remove","annotations","forEach","d","size","ui","_utils2","annotation","left","x","y","width","w","height","color","_colors","black","addClass","cls","fontSize","background","appendTo","_utils","./../constants/colors","./../misc/utils","4","_size","_size2","_text","_text2","_legend","_legend2","_annotations","_annotations2","draw","./annotations","./legend","./size","./text","5","legend","active","display","legendContainer","inside","legendStyles","keys","k","spread","axes","range","quantize","6","7","headline","chatter","footnote","author","8","categorical","sequential","red","blue","green","warm","cool","diverging","redBlue","redBlueMix","redGreen","orangePurple","white","9","_marked","_marked2"],"mappings":"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","file":"client.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n;(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n  ('def', '\\\\n+(?=' + block.def.source + ')')\n  ();\n\nblock.blockquote = replace(block.blockquote)\n  ('def', block.def)\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top, bq) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1]);\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2], true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return '';\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {\n      return '';\n    }\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n\t// explicitly match decimal, hex, and named HTML entities \n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/g, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer,\n  xhtml: false\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  this.marked = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : global);\n}());\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar _index = require('./client/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.render();\n\n},{\"./client/index.js\":4}],3:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var werk = window.chartwerk;\n  var chart = $('#chart');\n  chart.css({ position: 'relative' });\n\n  $('#chart .annotation.label').remove();\n\n  werk.text.annotations.forEach(function (d, i) {\n    if (d.size === 'd' && werk.ui.size === 'double' || d.size === 's' && werk.ui.size === 'single') {\n      var text = _utils2.default.inlineLexer(d.text, []);\n\n      var annotation = '<div class=\"annotation label\" data-id=\"' + i + '\">\\n        <div class=\"inner center\">\\n          <p>' + text + '</p>\\n        </div>\\n      </div>';\n\n      $(annotation).css({\n        position: 'absolute',\n        left: d.x,\n        top: d.y,\n        width: d.w,\n        height: 'auto',\n        color: d.color || _colors.black\n      }).addClass(function () {\n        var cls = d.align + ' ' + d.fontSize;\n        cls = d.background ? cls + ' bg' : cls;\n        return cls;\n      }).appendTo(chart);\n    }\n  });\n};\n\nvar _utils = require('./../misc/utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nvar _colors = require('./../constants/colors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n},{\"./../constants/colors\":8,\"./../misc/utils\":9}],4:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _size = require('./size');\n\nvar _size2 = _interopRequireDefault(_size);\n\nvar _text = require('./text');\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _legend = require('./legend');\n\nvar _legend2 = _interopRequireDefault(_legend);\n\nvar _annotations = require('./annotations');\n\nvar _annotations2 = _interopRequireDefault(_annotations);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n  render: function render() {\n    (0, _size2.default)();\n    window.draw();\n    (0, _text2.default)();\n    (0, _legend2.default)();\n    (0, _annotations2.default)();\n  }\n};\n\n},{\"./annotations\":3,\"./legend\":5,\"./size\":6,\"./text\":7}],5:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var werk = window.chartwerk;\n\n  if (werk.text.legend.active) {\n    var display = werk.text.legend[werk.ui.size];\n    var background = display.background ? 'bg' : '';\n    var align = display.align;\n    var position = display.position;\n\n    var legendContainer = display.inside ? $('#chart') : $('#chart-legend');\n\n    var legendStyles = !display.inside ? {\n      width: display.width\n    } : {\n      width: display.width,\n      top: position.y,\n      left: position.x,\n      position: 'absolute'\n    };\n\n    var legend = '<div class=\"chart-legend-container clearfix ' + align + ' ' + background + '\">\\n        <div class=\"title\">\\n          ' + _utils2.default.inlineLexer(werk.text.legend.title, []) + '\\n        </div>\\n      </div>';\n\n    $(legend).css(legendStyles).appendTo(legendContainer);\n\n    werk.text.legend.keys.forEach(function (k) {\n      var spread = 100 / werk.axes.color.range.length;\n\n      var key = !werk.axes.color.quantize ?\n      // Categorical key\n      '<div class=\"key\">\\n          <div\\n            class=\"key-color\"\\n            style=\"background-color: ' + k.color + ';\"\\n          ></div>\\n          <div class=\"key-label\">' + _utils2.default.inlineLexer(k.text, []) + '</div>\\n        </div>' :\n      // Quantized key\n      '<div\\n          class=\"key quantized\"\\n          style=\"width: ' + spread + '%;\"\\n        >\\n          <div\\n            class=\"key-label\"\\n            style=\"border-top: 12px solid ' + k.color + ';\"\\n          >' + _utils2.default.inlineLexer(k.text, []) + '</div>\\n        </div>';\n\n      $(key).appendTo($('.chart-legend-container'));\n    });\n  }\n};\n\nvar _utils = require('./../misc/utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n},{\"./../misc/utils\":9}],6:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  if (window.chartwerk.ui.size === 'single') {\n    $('#chartwerk').addClass('single');\n  }\n};\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  $('#chartwerk #headline').html(_utils2.default.inlineLexer(window.chartwerk.text.headline, []));\n  $('#chartwerk #chatter').html(_utils2.default.inlineLexer(window.chartwerk.text.chatter, []));\n  $('#chartwerk #footnote').html(_utils2.default.inlineLexer(window.chartwerk.text.footnote, []));\n  $('#chartwerk #source').html(_utils2.default.inlineLexer(window.chartwerk.text.source, []));\n  $('#chartwerk #author').html(_utils2.default.inlineLexer(window.chartwerk.text.author, []));\n};\n\nvar _utils = require('./../misc/utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n},{\"./../misc/utils\":9}],8:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Add your own color schemes here as nested arrays of hex color values.\n *\n * We recommend you replicate the structure of categorical, sequential and\n * diverging schemes, as used at http://colorbrewer2.org.\n *\n * If you want to change that structure, the reducer for setting the scheme\n * (SET_COLOR_SCHEME) is written to expect an array at categorical.default.\n * You'll also need to rewrite parseSchemes in the ColorScheme component to\n * match your custom structure.\n *\n * The ColorPicker component is styled to fit an array of 8 colors.\n *\n */\nexports.default = {\n  categorical: {\n    default: ['#329CEB', '#E34E36', '#FF8F24', '#FEC44F', '#52B033', '#8554BF', '#6DCCF2', '#C9C9C9']\n  },\n  sequential: {\n    red: ['#f5c8c1', '#eea89e', '#e8887a', '#e26856', '#dc4730', '#c13621', '#9d2c1b', '#700f00'],\n    blue: ['#cfebff', '#a5dbff', '#7bc2f2', '#5cb5f2', '#359fe6', '#2487c9', '#0267ab', '#004a7a'],\n    green: ['#d9ebc3', '#bde388', '#a2cf63', '#7bc049', '#65a835', '#4e941b', '#327303', '#245400'],\n    warm: ['#ffe261', '#ffc226', '#ffa310', '#f57f00', '#e35000', '#cc3300', '#a31600', '#700f00'],\n    cool: ['#d4f2cb', '#ace6b1', '#8bd9b9', '#5ac9c1', '#2cb9c7', '#0c94c2', '#0275c2', '#004a7a']\n  },\n  diverging: {\n    redBlue: ['#0078d1', '#299aee', '#5ab5fa', '#99d3ff', '#f7a699', '#f57864', '#e34e36', '#c42c14'],\n    redBlueMix: ['#0064c2', '#2985f2', '#7e94f7', '#aea4fc', '#d99ee8', '#de7cbf', '#ce5269', '#ba230b'],\n    redGreen: ['#c12e17', '#ea652b', '#fc9943', '#fcc857', '#bee16d', '#99cf51', '#6ebe34', '#539f1e'],\n    orangePurple: ['#b35806', '#e08214', '#fdb863', '#fee0b6', '#d8daeb', '#b2abd2', '#8073ac', '#542788']\n  }\n};\nvar black = exports.black = '#2d3035'; // Used as default color for annotation text\nvar white = exports.white = '#ffffff';\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _marked = require('marked');\n\nvar _marked2 = _interopRequireDefault(_marked);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Enable smart quotes\n_marked2.default.setOptions({\n  smartypants: true\n});\n\nexports.default = _marked2.default;\n\n},{\"marked\":1}]},{},[2])\n\n","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/chjj/marked\n */\n\n;(function() {\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, 'gm')\n  (/bull/g, block.bullet)\n  ();\n\nblock.list = replace(block.list)\n  (/bull/g, block.bullet)\n  ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\n  ('def', '\\\\n+(?=' + block.def.source + ')')\n  ();\n\nblock.blockquote = replace(block.blockquote)\n  ('def', block.def)\n  ();\n\nblock._tag = '(?!(?:'\n  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\n  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\n  + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\n\nblock.html = replace(block.html)\n  ('comment', /<!--[\\s\\S]*?-->/)\n  ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\n  ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\n  (/tag/g, block._tag)\n  ();\n\nblock.paragraph = replace(block.paragraph)\n  ('hr', block.hr)\n  ('heading', block.heading)\n  ('lheading', block.lheading)\n  ('blockquote', block.blockquote)\n  ('tag', '<' + block._tag)\n  ('def', block.def)\n  ();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)\n  ('(?!', '(?!'\n    + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\n    + block.list.source.replace('\\\\1', '\\\\3') + '|')\n  ();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = options || marked.defaults;\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.lex = function(src, options) {\n  var lexer = new Lexer(options);\n  return lexer.lex(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.lex = function(src) {\n  src = src\n    .replace(/\\r\\n|\\r/g, '\\n')\n    .replace(/\\t/g, '    ')\n    .replace(/\\u00a0/g, ' ')\n    .replace(/\\u2424/g, '\\n');\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function(src, top, bq) {\n  var src = src.replace(/^ +$/gm, '')\n    , next\n    , loose\n    , cap\n    , bull\n    , b\n    , item\n    , space\n    , i\n    , l;\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[0].length > 1) {\n        this.tokens.push({\n          type: 'space'\n        });\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, '');\n      this.tokens.push({\n        type: 'code',\n        text: !this.options.pedantic\n          ? cap.replace(/\\n+$/, '')\n          : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'code',\n        lang: cap[2],\n        text: cap[3] || ''\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i].split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // lheading\n    if (cap = this.rules.lheading.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'heading',\n        depth: cap[2] === '=' ? 1 : 2,\n        text: cap[1]\n      });\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'hr'\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: 'blockquote_start'\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, '');\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: 'blockquote_end'\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n\n      this.tokens.push({\n        type: 'list_start',\n        ordered: bull.length > 1\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf('\\n ')) {\n          space -= item.length;\n          item = !this.options.pedantic\n            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n            : item.replace(/^ {1,4}/gm, '');\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join('\\n') + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === '\\n';\n          if (!loose) loose = next;\n        }\n\n        this.tokens.push({\n          type: loose\n            ? 'loose_item_start'\n            : 'list_item_start'\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: 'list_item_end'\n        });\n      }\n\n      this.tokens.push({\n        type: 'list_end'\n      });\n\n      continue;\n    }\n\n    // html\n    if (cap = this.rules.html.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: this.options.sanitize\n          ? 'paragraph'\n          : 'html',\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      });\n      continue;\n    }\n\n    // def\n    if ((!bq && top) && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: 'table',\n        header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = 'right';\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = 'center';\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = 'left';\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = item.cells[i]\n          .replace(/^ *\\| *| *\\| *$/g, '')\n          .split(/ *\\| */);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'paragraph',\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1]\n      });\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: 'text',\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)\n  ('inside', inline._inside)\n  ('href', inline._href)\n  ();\n\ninline.reflink = replace(inline.reflink)\n  ('inside', inline._inside)\n  ();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)\n    (']|', '~]|')\n    ('|', '|https?://|')\n    ()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = options || marked.defaults;\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer;\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new\n      Error('Tokens array requires a `links` property.');\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.output = function(src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.output(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.output = function(src) {\n  var out = ''\n    , link\n    , text\n    , href\n    , cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += cap[1];\n      continue;\n    }\n\n    // autolink\n    if (cap = this.rules.autolink.exec(src)) {\n      src = src.substring(cap[0].length);\n      if (cap[2] === '@') {\n        text = cap[1].charAt(6) === ':'\n          ? this.mangle(cap[1].substring(7))\n          : this.mangle(cap[1]);\n        href = this.mangle('mailto:') + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // url (gfm)\n    if (!this.inLink && (cap = this.rules.url.exec(src))) {\n      src = src.substring(cap[0].length);\n      text = escape(cap[1]);\n      href = text;\n      out += this.renderer.link(href, null, text);\n      continue;\n    }\n\n    // tag\n    if (cap = this.rules.tag.exec(src)) {\n      if (!this.inLink && /^<a /i.test(cap[0])) {\n        this.inLink = true;\n      } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.inLink = false;\n      }\n      src = src.substring(cap[0].length);\n      out += this.options.sanitize\n        ? this.options.sanitizer\n          ? this.options.sanitizer(cap[0])\n          : escape(cap[0])\n        : cap[0]\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.inLink = true;\n      out += this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      });\n      this.inLink = false;\n      continue;\n    }\n\n    // reflink, nolink\n    if ((cap = this.rules.reflink.exec(src))\n        || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out += cap[0].charAt(0);\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      this.inLink = true;\n      out += this.outputLink(cap, link);\n      this.inLink = false;\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.strong(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.em(this.output(cap[2] || cap[1]));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.codespan(escape(cap[2], true));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.br();\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.del(this.output(cap[1]));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out += this.renderer.text(escape(this.smartypants(cap[0])));\n      continue;\n    }\n\n    if (src) {\n      throw new\n        Error('Infinite loop on byte: ' + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function(cap, link) {\n  var href = escape(link.href)\n    , title = link.title ? escape(link.title) : null;\n\n  return cap[0].charAt(0) !== '!'\n    ? this.renderer.link(href, title, this.output(cap[1]))\n    : this.renderer.image(href, title, escape(cap[1]));\n};\n\n/**\n * Smartypants Transformations\n */\n\nInlineLexer.prototype.smartypants = function(text) {\n  if (!this.options.smartypants) return text;\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n};\n\n/**\n * Mangle Links\n */\n\nInlineLexer.prototype.mangle = function(text) {\n  if (!this.options.mangle) return text;\n  var out = ''\n    , l = text.length\n    , i = 0\n    , ch;\n\n  for (; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return '<pre><code>'\n      + (escaped ? code : escape(code, true))\n      + '\\n</code></pre>';\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\n</code></pre>\\n';\n};\n\nRenderer.prototype.blockquote = function(quote) {\n  return '<blockquote>\\n' + quote + '</blockquote>\\n';\n};\n\nRenderer.prototype.html = function(html) {\n  return html;\n};\n\nRenderer.prototype.heading = function(text, level, raw) {\n  return '<h'\n    + level\n    + ' id=\"'\n    + this.options.headerPrefix\n    + raw.toLowerCase().replace(/[^\\w]+/g, '-')\n    + '\">'\n    + text\n    + '</h'\n    + level\n    + '>\\n';\n};\n\nRenderer.prototype.hr = function() {\n  return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n};\n\nRenderer.prototype.list = function(body, ordered) {\n  var type = ordered ? 'ol' : 'ul';\n  return '<' + type + '>\\n' + body + '</' + type + '>\\n';\n};\n\nRenderer.prototype.listitem = function(text) {\n  return '<li>' + text + '</li>\\n';\n};\n\nRenderer.prototype.paragraph = function(text) {\n  return '<p>' + text + '</p>\\n';\n};\n\nRenderer.prototype.table = function(header, body) {\n  return '<table>\\n'\n    + '<thead>\\n'\n    + header\n    + '</thead>\\n'\n    + '<tbody>\\n'\n    + body\n    + '</tbody>\\n'\n    + '</table>\\n';\n};\n\nRenderer.prototype.tablerow = function(content) {\n  return '<tr>\\n' + content + '</tr>\\n';\n};\n\nRenderer.prototype.tablecell = function(content, flags) {\n  var type = flags.header ? 'th' : 'td';\n  var tag = flags.align\n    ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\n    : '<' + type + '>';\n  return tag + content + '</' + type + '>\\n';\n};\n\n// span level renderer\nRenderer.prototype.strong = function(text) {\n  return '<strong>' + text + '</strong>';\n};\n\nRenderer.prototype.em = function(text) {\n  return '<em>' + text + '</em>';\n};\n\nRenderer.prototype.codespan = function(text) {\n  return '<code>' + text + '</code>';\n};\n\nRenderer.prototype.br = function() {\n  return this.options.xhtml ? '<br/>' : '<br>';\n};\n\nRenderer.prototype.del = function(text) {\n  return '<del>' + text + '</del>';\n};\n\nRenderer.prototype.link = function(href, title, text) {\n  if (this.options.sanitize) {\n    try {\n      var prot = decodeURIComponent(unescape(href))\n        .replace(/[^\\w:]/g, '')\n        .toLowerCase();\n    } catch (e) {\n      return '';\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0) {\n      return '';\n    }\n  }\n  var out = '<a href=\"' + href + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += '>' + text + '</a>';\n  return out;\n};\n\nRenderer.prototype.image = function(href, title, text) {\n  var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n  if (title) {\n    out += ' title=\"' + title + '\"';\n  }\n  out += this.options.xhtml ? '/>' : '>';\n  return out;\n};\n\nRenderer.prototype.text = function(text) {\n  return text;\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = options || marked.defaults;\n  this.options.renderer = this.options.renderer || new Renderer;\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function(src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function(src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.reverse();\n\n  var out = '';\n  while (this.next()) {\n    out += this.tok();\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function() {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function() {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function() {\n  var body = this.token.text;\n\n  while (this.peek().type === 'text') {\n    body += '\\n' + this.next().text;\n  }\n\n  return this.inline.output(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function() {\n  switch (this.token.type) {\n    case 'space': {\n      return '';\n    }\n    case 'hr': {\n      return this.renderer.hr();\n    }\n    case 'heading': {\n      return this.renderer.heading(\n        this.inline.output(this.token.text),\n        this.token.depth,\n        this.token.text);\n    }\n    case 'code': {\n      return this.renderer.code(this.token.text,\n        this.token.lang,\n        this.token.escaped);\n    }\n    case 'table': {\n      var header = ''\n        , body = ''\n        , i\n        , row\n        , cell\n        , flags\n        , j;\n\n      // header\n      cell = '';\n      for (i = 0; i < this.token.header.length; i++) {\n        flags = { header: true, align: this.token.align[i] };\n        cell += this.renderer.tablecell(\n          this.inline.output(this.token.header[i]),\n          { header: true, align: this.token.align[i] }\n        );\n      }\n      header += this.renderer.tablerow(cell);\n\n      for (i = 0; i < this.token.cells.length; i++) {\n        row = this.token.cells[i];\n\n        cell = '';\n        for (j = 0; j < row.length; j++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(row[j]),\n            { header: false, align: this.token.align[j] }\n          );\n        }\n\n        body += this.renderer.tablerow(cell);\n      }\n      return this.renderer.table(header, body);\n    }\n    case 'blockquote_start': {\n      var body = '';\n\n      while (this.next().type !== 'blockquote_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.blockquote(body);\n    }\n    case 'list_start': {\n      var body = ''\n        , ordered = this.token.ordered;\n\n      while (this.next().type !== 'list_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.list(body, ordered);\n    }\n    case 'list_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.token.type === 'text'\n          ? this.parseText()\n          : this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'loose_item_start': {\n      var body = '';\n\n      while (this.next().type !== 'list_item_end') {\n        body += this.tok();\n      }\n\n      return this.renderer.listitem(body);\n    }\n    case 'html': {\n      var html = !this.token.pre && !this.options.pedantic\n        ? this.inline.output(this.token.text)\n        : this.token.text;\n      return this.renderer.html(html);\n    }\n    case 'paragraph': {\n      return this.renderer.paragraph(this.inline.output(this.token.text));\n    }\n    case 'text': {\n      return this.renderer.paragraph(this.parseText());\n    }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction escape(html, encode) {\n  return html\n    .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;');\n}\n\nfunction unescape(html) {\n\t// explicitly match decimal, hex, and named HTML entities \n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/g, function(_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source;\n  opt = opt || '';\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt);\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, '$1');\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nfunction noop() {}\nnoop.exec = noop;\n\nfunction merge(obj) {\n  var i = 1\n    , target\n    , key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\n\n/**\n * Marked\n */\n\nfunction marked(src, opt, callback) {\n  if (callback || typeof opt === 'function') {\n    if (!callback) {\n      callback = opt;\n      opt = null;\n    }\n\n    opt = merge({}, marked.defaults, opt || {});\n\n    var highlight = opt.highlight\n      , tokens\n      , pending\n      , i = 0;\n\n    try {\n      tokens = Lexer.lex(src, opt)\n    } catch (e) {\n      return callback(e);\n    }\n\n    pending = tokens.length;\n\n    var done = function(err) {\n      if (err) {\n        opt.highlight = highlight;\n        return callback(err);\n      }\n\n      var out;\n\n      try {\n        out = Parser.parse(tokens, opt);\n      } catch (e) {\n        err = e;\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!pending) return done();\n\n    for (; i < tokens.length; i++) {\n      (function(token) {\n        if (token.type !== 'code') {\n          return --pending || done();\n        }\n        return highlight(token.text, token.lang, function(err, code) {\n          if (err) return done(err);\n          if (code == null || code === token.text) {\n            return --pending || done();\n          }\n          token.text = code;\n          token.escaped = true;\n          --pending || done();\n        });\n      })(tokens[i]);\n    }\n\n    return;\n  }\n  try {\n    if (opt) opt = merge({}, marked.defaults, opt);\n    return Parser.parse(Lexer.lex(src, opt), opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/chjj/marked.';\n    if ((opt || marked.defaults).silent) {\n      return '<p>An error occured:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  return marked;\n};\n\nmarked.defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer,\n  xhtml: false\n};\n\n/**\n * Expose\n */\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\n\nmarked.Renderer = Renderer;\n\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\n\nmarked.InlineLexer = InlineLexer;\nmarked.inlineLexer = InlineLexer.output;\n\nmarked.parse = marked;\n\nif (typeof module !== 'undefined' && typeof exports === 'object') {\n  module.exports = marked;\n} else if (typeof define === 'function' && define.amd) {\n  define(function() { return marked; });\n} else {\n  this.marked = marked;\n}\n\n}).call(function() {\n  return this || (typeof window !== 'undefined' ? window : global);\n}());\n","import renderer from './client/index.js';\n\nrenderer.render();\n","import marked from './../misc/utils';\nimport { black } from './../constants/colors';\n\n/**\n * Render annotations for appropriate size rendered chart.\n * @return {null}\n */\nexport default function () {\n  const werk = window.chartwerk;\n  const chart = $('#chart');\n  chart.css({ position: 'relative' });\n\n  $('#chart .annotation.label').remove();\n\n  werk.text.annotations.forEach((d, i) => {\n    if (\n      (d.size === 'd' && werk.ui.size === 'double') ||\n      (d.size === 's' && werk.ui.size === 'single')\n    ) {\n      const text = marked.inlineLexer(d.text, []);\n\n      const annotation =\n      `<div class=\"annotation label\" data-id=\"${i}\">\n        <div class=\"inner center\">\n          <p>${text}</p>\n        </div>\n      </div>`;\n\n      $(annotation)\n        .css({\n          position: 'absolute',\n          left: d.x,\n          top: d.y,\n          width: d.w,\n          height: 'auto',\n          color: d.color || black,\n        })\n        .addClass(() => {\n          let cls = `${d.align} ${d.fontSize}`;\n          cls = d.background ? `${cls} bg` : cls;\n          return cls;\n        })\n        .appendTo(chart);\n    }\n  });\n}\n","import renderSize from './size';\nimport renderText from './text';\nimport renderLegend from './legend';\nimport renderAnnotations from './annotations';\n\nexport default {\n  render() {\n    renderSize();\n    window.draw();\n    renderText();\n    renderLegend();\n    renderAnnotations();\n  },\n};\n","import marked from './../misc/utils';\n\n/**\n * Render the legend, both categorical and quantized keys.\n * @return {null}\n */\nexport default function () {\n  const werk = window.chartwerk;\n\n  if (werk.text.legend.active) {\n    const display = werk.text.legend[werk.ui.size];\n    const background = display.background ? 'bg' : '';\n    const align = display.align;\n    const position = display.position;\n\n    const legendContainer = display.inside ?\n      $('#chart') : $('#chart-legend');\n\n    const legendStyles = !display.inside ?\n    {\n      width: display.width,\n    } :\n    {\n      width: display.width,\n      top: position.y,\n      left: position.x,\n      position: 'absolute',\n    };\n\n    const legend =\n    `<div class=\"chart-legend-container clearfix ${align} ${background}\">\n        <div class=\"title\">\n          ${marked.inlineLexer(werk.text.legend.title, [])}\n        </div>\n      </div>`;\n\n    $(legend)\n      .css(legendStyles)\n      .appendTo(legendContainer);\n\n    werk.text.legend.keys.forEach((k) => {\n      const spread = 100 / werk.axes.color.range.length;\n\n      const key = !werk.axes.color.quantize ?\n        // Categorical key\n        `<div class=\"key\">\n          <div\n            class=\"key-color\"\n            style=\"background-color: ${k.color};\"\n          ></div>\n          <div class=\"key-label\">${marked.inlineLexer(k.text, [])}</div>\n        </div>`\n      :\n        // Quantized key\n        `<div\n          class=\"key quantized\"\n          style=\"width: ${spread}%;\"\n        >\n          <div\n            class=\"key-label\"\n            style=\"border-top: 12px solid ${k.color};\"\n          >${marked.inlineLexer(k.text, [])}</div>\n        </div>`;\n\n      $(key).appendTo($('.chart-legend-container'));\n    });\n  }\n}\n","/**\n * Size the chart by adding a class to the\n * chart container when single-wide.\n * @return {null}\n */\nexport default function () {\n  if (window.chartwerk.ui.size === 'single') {\n    $('#chartwerk').addClass('single');\n  }\n}\n","import marked from './../misc/utils';\n\n/**\n * Render text to various divs.\n * @return {null}\n */\nexport default function () {\n  $('#chartwerk #headline').html(marked.inlineLexer(window.chartwerk.text.headline, []));\n  $('#chartwerk #chatter').html(marked.inlineLexer(window.chartwerk.text.chatter, []));\n  $('#chartwerk #footnote').html(marked.inlineLexer(window.chartwerk.text.footnote, []));\n  $('#chartwerk #source').html(marked.inlineLexer(window.chartwerk.text.source, []));\n  $('#chartwerk #author').html(marked.inlineLexer(window.chartwerk.text.author, []));\n}\n","/**\n * Add your own color schemes here as nested arrays of hex color values.\n *\n * We recommend you replicate the structure of categorical, sequential and\n * diverging schemes, as used at http://colorbrewer2.org.\n *\n * If you want to change that structure, the reducer for setting the scheme\n * (SET_COLOR_SCHEME) is written to expect an array at categorical.default.\n * You'll also need to rewrite parseSchemes in the ColorScheme component to\n * match your custom structure.\n *\n * The ColorPicker component is styled to fit an array of 8 colors.\n *\n */\nexport default {\n  categorical: {\n    default: [\n      '#329CEB',\n      '#E34E36',\n      '#FF8F24',\n      '#FEC44F',\n      '#52B033',\n      '#8554BF',\n      '#6DCCF2',\n      '#C9C9C9',\n    ],\n  },\n  sequential: {\n    red: [\n      '#f5c8c1',\n      '#eea89e',\n      '#e8887a',\n      '#e26856',\n      '#dc4730',\n      '#c13621',\n      '#9d2c1b',\n      '#700f00',\n    ],\n    blue: [\n      '#cfebff',\n      '#a5dbff',\n      '#7bc2f2',\n      '#5cb5f2',\n      '#359fe6',\n      '#2487c9',\n      '#0267ab',\n      '#004a7a',\n    ],\n    green: [\n      '#d9ebc3',\n      '#bde388',\n      '#a2cf63',\n      '#7bc049',\n      '#65a835',\n      '#4e941b',\n      '#327303',\n      '#245400',\n    ],\n    warm: [\n      '#ffe261',\n      '#ffc226',\n      '#ffa310',\n      '#f57f00',\n      '#e35000',\n      '#cc3300',\n      '#a31600',\n      '#700f00',\n    ],\n    cool: [\n      '#d4f2cb',\n      '#ace6b1',\n      '#8bd9b9',\n      '#5ac9c1',\n      '#2cb9c7',\n      '#0c94c2',\n      '#0275c2',\n      '#004a7a',\n    ],\n  },\n  diverging: {\n    redBlue: [\n      '#0078d1',\n      '#299aee',\n      '#5ab5fa',\n      '#99d3ff',\n      '#f7a699',\n      '#f57864',\n      '#e34e36',\n      '#c42c14',\n    ],\n    redBlueMix: [\n      '#0064c2',\n      '#2985f2',\n      '#7e94f7',\n      '#aea4fc',\n      '#d99ee8',\n      '#de7cbf',\n      '#ce5269',\n      '#ba230b',\n    ],\n    redGreen: [\n      '#c12e17',\n      '#ea652b',\n      '#fc9943',\n      '#fcc857',\n      '#bee16d',\n      '#99cf51',\n      '#6ebe34',\n      '#539f1e',\n    ],\n    orangePurple: [\n      '#b35806',\n      '#e08214',\n      '#fdb863',\n      '#fee0b6',\n      '#d8daeb',\n      '#b2abd2',\n      '#8073ac',\n      '#542788',\n    ],\n  },\n};\n\nexport const black = '#2d3035'; // Used as default color for annotation text\nexport const white = '#ffffff';\n","import marked from 'marked';\n\n// Enable smart quotes\nmarked.setOptions({\n  smartypants: true,\n});\n\nexport default marked;\n"],"sourceRoot":"/source/"}