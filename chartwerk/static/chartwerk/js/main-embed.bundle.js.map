{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/pym.js/dist/pym.v1.js","main-embed.js","src/js/main-embed.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","factory","define","amd","window","pym","this","MESSAGE_DELIMITER","lib","_raiseCustomEvent","eventName","event","document","createEvent","initEvent","dispatchEvent","_getParameterByName","name","regex","RegExp","replace","results","exec","location","search","decodeURIComponent","_isSafeMessage","settings","xdomain","origin","match","data","_makeMessage","id","messageType","message","bits","join","_makeMessageRegex","_getNow","Date","now","getTime","_throttle","func","wait","options","context","args","result","timeout","previous","later","leading","apply","remaining","arguments","clearTimeout","trailing","setTimeout","_cleanAutoInitInstances","autoInitInstances","idx","instance","el","getElementsByTagName","contentWindow","splice","autoInit","doNotRaiseEvents","elements","querySelectorAll","element","setAttribute","Math","random","toString","substr","src","getAttribute","title","sandbox","allowfullscreen","parenturlparam","parenturlvalue","optionalparams","trackscroll","scrollwait","config","attribute","Number","isNaN","console","err","parent","Parent","push","url","getElementById","iframe","href","messageRegex","messageHandlers","_constructIframe","width","offsetWidth","createElement","hash","hashIndex","indexOf","substring","encodeURIComponent","undefined","firstChild","removeChild","appendChild","addEventListener","_onResize","_throttleOnScroll","sendWidth","sendViewportAndIFramePosition","bind","_onScroll","_fire","remove","removeEventListener","_processMessage","_onHeightMessage","height","parseInt","_onNavigateToMessage","_onScrollToChildPosMessage","iframePos","getBoundingClientRect","top","pageYOffset","totalOffset","scrollTo","onMessage","callback","sendMessage","postMessage","iframeRect","vWidth","innerWidth","documentElement","clientWidth","vHeight","innerHeight","clientHeight","payload","left","bottom","right","key","Child","parentWidth","parentTitle","parentUrl","renderCallback","polling","timerId","_onWidthMessage","sendHeight","offsetHeight","getParentPositionInfo","scrollParentTo","navigateParentTo","scrollParentToChildEl","topPos","scrollParentToChildPos","pos","_markWhetherEmbedded","onMarkedEmbeddedStatus","newClassForHtml","htmlElement","originalHtmlClasses","className","self","clearInterval","setInterval","2","_interopRequireDefault","obj","__esModule","default","_pym","_pym2","werks","werk","dataset","chartPath","paths","single","double","dimensions","JSON","parse","size","viewportWidth","parentElement","pymParent","style","classList","add","pym.js"],"mappings":"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","file":"main-embed.bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*! pym.js - v1.3.2 - 2017-08-13 */\n/*\n* Pym.js is library that resizes an iframe based on the width of the parent and the resulting height of the child.\n* Check out the docs at http://blog.apps.npr.org/pym.js/ or the readme at README.md for usage.\n*/\n\n/** @module pym */\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    }\n    else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    } else {\n      if (typeof window.pym === 'undefined') {\n        window.pym = factory.call(this);\n      }\n    }\n})(function() {\n    var MESSAGE_DELIMITER = 'xPYMx';\n\n    var lib = {};\n\n    /**\n    * Create and dispatch a custom pym event\n    *\n    * @method _raiseCustomEvent\n    * @inner\n    *\n    * @param {String} eventName\n    */\n   var _raiseCustomEvent = function(eventName) {\n     var event = document.createEvent('Event');\n     event.initEvent('pym:' + eventName, true, true);\n     document.dispatchEvent(event);\n   };\n\n    /**\n    * Generic function for parsing URL params.\n    * Via http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\n    *\n    * @method _getParameterByName\n    * @inner\n    *\n    * @param {String} name The name of the paramter to get from the URL.\n    */\n    var _getParameterByName = function(name) {\n        var regex = new RegExp(\"[\\\\?&]\" + name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]') + '=([^&#]*)');\n        var results = regex.exec(location.search);\n\n        if (results === null) {\n            return '';\n        }\n\n        return decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    };\n\n    /**\n     * Check the message to make sure it comes from an acceptable xdomain.\n     * Defaults to '*' but can be overriden in config.\n     *\n     * @method _isSafeMessage\n     * @inner\n     *\n     * @param {Event} e The message event.\n     * @param {Object} settings Configuration.\n     */\n    var _isSafeMessage = function(e, settings) {\n        if (settings.xdomain !== '*') {\n            // If origin doesn't match our xdomain, return.\n            if (!e.origin.match(new RegExp(settings.xdomain + '$'))) { return; }\n        }\n\n        // Ignore events that do not carry string data #151\n        if (typeof e.data !== 'string') { return; }\n\n        return true;\n    };\n\n    /**\n     * Construct a message to send between frames.\n     *\n     * NB: We use string-building here because JSON message passing is\n     * not supported in all browsers.\n     *\n     * @method _makeMessage\n     * @inner\n     *\n     * @param {String} id The unique id of the message recipient.\n     * @param {String} messageType The type of message to send.\n     * @param {String} message The message to send.\n     */\n    var _makeMessage = function(id, messageType, message) {\n        var bits = ['pym', id, messageType, message];\n\n        return bits.join(MESSAGE_DELIMITER);\n    };\n\n    /**\n     * Construct a regex to validate and parse messages.\n     *\n     * @method _makeMessageRegex\n     * @inner\n     *\n     * @param {String} id The unique id of the message recipient.\n     */\n    var _makeMessageRegex = function(id) {\n        var bits = ['pym', id, '(\\\\S+)', '(.*)'];\n\n        return new RegExp('^' + bits.join(MESSAGE_DELIMITER) + '$');\n    };\n\n    /**\n    * Underscore implementation of getNow\n    *\n    * @method _getNow\n    * @inner\n    *\n    */\n    var _getNow = Date.now || function() {\n        return new Date().getTime();\n    };\n\n    /**\n    * Underscore implementation of throttle\n    *\n    * @method _throttle\n    * @inner\n    *\n    * @param {function} func Throttled function\n    * @param {number} wait Throttle wait time\n    * @param {object} options Throttle settings\n    */\n\n    var _throttle = function(func, wait, options) {\n        var context, args, result;\n        var timeout = null;\n        var previous = 0;\n        if (!options) {options = {};}\n        var later = function() {\n            previous = options.leading === false ? 0 : _getNow();\n            timeout = null;\n            result = func.apply(context, args);\n            if (!timeout) {context = args = null;}\n        };\n        return function() {\n            var now = _getNow();\n            if (!previous && options.leading === false) {previous = now;}\n            var remaining = wait - (now - previous);\n            context = this;\n            args = arguments;\n            if (remaining <= 0 || remaining > wait) {\n                if (timeout) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                previous = now;\n                result = func.apply(context, args);\n                if (!timeout) {context = args = null;}\n            } else if (!timeout && options.trailing !== false) {\n                timeout = setTimeout(later, remaining);\n            }\n            return result;\n        };\n    };\n\n    /**\n     * Clean autoInit Instances: those that point to contentless iframes\n     * @method _cleanAutoInitInstances\n     * @inner\n     */\n    var _cleanAutoInitInstances = function() {\n        var length = lib.autoInitInstances.length;\n\n        // Loop backwards to avoid index issues\n        for (var idx = length - 1; idx >= 0; idx--) {\n            var instance = lib.autoInitInstances[idx];\n            // If instance has been removed or is contentless then remove it\n            if (instance.el.getElementsByTagName('iframe').length &&\n                instance.el.getElementsByTagName('iframe')[0].contentWindow) {\n                continue;\n            }\n            else {\n                // Remove the reference to the removed or orphan instance\n                lib.autoInitInstances.splice(idx,1);\n            }\n        }\n    };\n\n    /**\n     * Store auto initialized Pym instances for further reference\n     * @name module:pym#autoInitInstances\n     * @type Array\n     * @default []\n     */\n    lib.autoInitInstances = [];\n\n    /**\n     * Initialize Pym for elements on page that have data-pym attributes.\n     * Expose autoinit in case we need to call it from the outside\n     * @instance\n     * @method autoInit\n     * @param {Boolean} doNotRaiseEvents flag to avoid sending custom events\n     */\n    lib.autoInit = function(doNotRaiseEvents) {\n        var elements = document.querySelectorAll('[data-pym-src]:not([data-pym-auto-initialized])');\n        var length = elements.length;\n\n        // Clean stored instances in case needed\n        _cleanAutoInitInstances();\n        for (var idx = 0; idx < length; ++idx) {\n            var element = elements[idx];\n            /*\n            * Mark automatically-initialized elements so they are not\n            * re-initialized if the user includes pym.js more than once in the\n            * same document.\n            */\n            element.setAttribute('data-pym-auto-initialized', '');\n\n            // Ensure elements have an id\n            if (element.id === '') {\n                element.id = 'pym-' + idx + \"-\" + Math.random().toString(36).substr(2,5);\n            }\n\n            var src = element.getAttribute('data-pym-src');\n\n            // List of data attributes to configure the component\n            // structure: {'attribute name': 'type'}\n            var settings = {'xdomain': 'string', 'title': 'string', 'name': 'string', 'id': 'string',\n                            'sandbox': 'string', 'allowfullscreen': 'boolean',\n                            'parenturlparam': 'string', 'parenturlvalue': 'string',\n                            'optionalparams': 'boolean', 'trackscroll': 'boolean',\n                            'scrollwait': 'number'};\n\n            var config = {};\n\n            for (var attribute in settings) {\n                // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute#Notes\n               if (element.getAttribute('data-pym-'+attribute) !== null) {\n                  switch (settings[attribute]) {\n                    case 'boolean':\n                       config[attribute] = !(element.getAttribute('data-pym-'+attribute) === 'false'); // jshint ignore:line\n                       break;\n                    case 'string':\n                       config[attribute] = element.getAttribute('data-pym-'+attribute);\n                       break;\n                    case 'number':\n                        var n = Number(element.getAttribute('data-pym-'+attribute));\n                        if (!isNaN(n)) {\n                            config[attribute] = n;\n                        }\n                        break;\n                    default:\n                       console.err('unrecognized attribute type');\n                  }\n               }\n            }\n\n            // Store references to autoinitialized pym instances\n            var parent = new lib.Parent(element.id, src, config);\n            lib.autoInitInstances.push(parent);\n        }\n\n        // Fire customEvent\n        if (!doNotRaiseEvents) {\n            _raiseCustomEvent(\"pym-initialized\");\n        }\n        // Return stored autoinitalized pym instances\n        return lib.autoInitInstances;\n    };\n\n    /**\n     * The Parent half of a response iframe.\n     *\n     * @memberof module:pym\n     * @class Parent\n     * @param {String} id The id of the div into which the iframe will be rendered. sets {@link module:pym.Parent~id}\n     * @param {String} url The url of the iframe source. sets {@link module:pym.Parent~url}\n     * @param {Object} [config] Configuration for the parent instance. sets {@link module:pym.Parent~settings}\n     * @param {string} [config.xdomain='*'] - xdomain to validate messages received\n     * @param {string} [config.title] - if passed it will be assigned to the iframe title attribute\n     * @param {string} [config.name] - if passed it will be assigned to the iframe name attribute\n     * @param {string} [config.id] - if passed it will be assigned to the iframe id attribute\n     * @param {boolean} [config.allowfullscreen] - if passed and different than false it will be assigned to the iframe allowfullscreen attribute\n     * @param {string} [config.sandbox] - if passed it will be assigned to the iframe sandbox attribute (we do not validate the syntax so be careful!!)\n     * @param {string} [config.parenturlparam] - if passed it will be override the default parentUrl query string parameter name passed to the iframe src\n     * @param {string} [config.parenturlvalue] - if passed it will be override the default parentUrl query string parameter value passed to the iframe src\n     * @param {string} [config.optionalparams] - if passed and different than false it will strip the querystring params parentUrl and parentTitle passed to the iframe src\n     * @param {boolean} [config.trackscroll] - if passed it will activate scroll tracking on the parent\n     * @param {number} [config.scrollwait] - if passed it will set the throttle wait in order to fire scroll messaging. Defaults to 100 ms.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe iFrame}\n     */\n    lib.Parent = function(id, url, config) {\n        /**\n         * The id of the container element\n         *\n         * @memberof module:pym.Parent\n         * @member {string} id\n         * @inner\n         */\n        this.id = id;\n        /**\n         * The url that will be set as the iframe's src\n         *\n         * @memberof module:pym.Parent\n         * @member {String} url\n         * @inner\n         */\n        this.url = url;\n\n        /**\n         * The container DOM object\n         *\n         * @memberof module:pym.Parent\n         * @member {HTMLElement} el\n         * @inner\n         */\n        this.el = document.getElementById(id);\n        /**\n         * The contained child iframe\n         *\n         * @memberof module:pym.Parent\n         * @member {HTMLElement} iframe\n         * @inner\n         * @default null\n         */\n        this.iframe = null;\n        /**\n         * The parent instance settings, updated by the values passed in the config object\n         *\n         * @memberof module:pym.Parent\n         * @member {Object} settings\n         * @inner\n         */\n        this.settings = {\n            xdomain: '*',\n            optionalparams: true,\n            parenturlparam: 'parentUrl',\n            parenturlvalue: window.location.href,\n            trackscroll: false,\n            scrollwait: 100,\n        };\n        /**\n         * RegularExpression to validate the received messages\n         *\n         * @memberof module:pym.Parent\n         * @member {String} messageRegex\n         * @inner\n         */\n        this.messageRegex = _makeMessageRegex(this.id);\n        /**\n         * Stores the registered messageHandlers for each messageType\n         *\n         * @memberof module:pym.Parent\n         * @member {Object} messageHandlers\n         * @inner\n         */\n        this.messageHandlers = {};\n\n        // ensure a config object\n        config = (config || {});\n\n        /**\n         * Construct the iframe.\n         *\n         * @memberof module:pym.Parent\n         * @method _constructIframe\n         * @inner\n         */\n        this._constructIframe = function() {\n            // Calculate the width of this element.\n            var width = this.el.offsetWidth.toString();\n\n            // Create an iframe element attached to the document.\n            this.iframe = document.createElement('iframe');\n\n            // Save fragment id\n            var hash = '';\n            var hashIndex = this.url.indexOf('#');\n\n            if (hashIndex > -1) {\n                hash = this.url.substring(hashIndex, this.url.length);\n                this.url = this.url.substring(0, hashIndex);\n            }\n\n            // If the URL contains querystring bits, use them.\n            // Otherwise, just create a set of valid params.\n            if (this.url.indexOf('?') < 0) {\n                this.url += '?';\n            } else {\n                this.url += '&';\n            }\n\n            // Append the initial width as a querystring parameter\n            // and optional params if configured to do so\n            this.iframe.src = this.url + 'initialWidth=' + width +\n                                         '&childId=' + this.id;\n\n            if (this.settings.optionalparams) {\n                this.iframe.src += '&parentTitle=' + encodeURIComponent(document.title);\n                this.iframe.src += '&'+ this.settings.parenturlparam + '=' + encodeURIComponent(this.settings.parenturlvalue);\n            }\n            this.iframe.src +=hash;\n\n            // Set some attributes to this proto-iframe.\n            this.iframe.setAttribute('width', '100%');\n            this.iframe.setAttribute('scrolling', 'no');\n            this.iframe.setAttribute('marginheight', '0');\n            this.iframe.setAttribute('frameborder', '0');\n\n            if (this.settings.title) {\n                this.iframe.setAttribute('title', this.settings.title);\n            }\n\n            if (this.settings.allowfullscreen !== undefined && this.settings.allowfullscreen !== false) {\n                this.iframe.setAttribute('allowfullscreen','');\n            }\n\n            if (this.settings.sandbox !== undefined && typeof this.settings.sandbox === 'string') {\n                this.iframe.setAttribute('sandbox', this.settings.sandbox);\n            }\n\n            if (this.settings.id) {\n                if (!document.getElementById(this.settings.id)) {\n                    this.iframe.setAttribute('id', this.settings.id);\n                }\n            }\n\n            if (this.settings.name) {\n                this.iframe.setAttribute('name', this.settings.name);\n            }\n\n            // Replace the child content if needed\n            // (some CMSs might strip out empty elements)\n            while(this.el.firstChild) { this.el.removeChild(this.el.firstChild); }\n            // Append the iframe to our element.\n            this.el.appendChild(this.iframe);\n\n            // Add an event listener that will handle redrawing the child on resize.\n            window.addEventListener('resize', this._onResize);\n\n            // Add an event listener that will send the child the viewport.\n            if (this.settings.trackscroll) {\n                window.addEventListener('scroll', this._throttleOnScroll);\n            }\n        };\n\n        /**\n         * Send width on resize.\n         *\n         * @memberof module:pym.Parent\n         * @method _onResize\n         * @inner\n         */\n        this._onResize = function() {\n            this.sendWidth();\n            if (this.settings.trackscroll) {\n                this.sendViewportAndIFramePosition();\n            }\n        }.bind(this);\n\n        /**\n         * Send viewport and iframe info on scroll.\n         *\n         * @memberof module:pym.Parent\n         * @method _onScroll\n         * @inner\n         */\n        this._onScroll = function() {\n            this.sendViewportAndIFramePosition();\n        }.bind(this);\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof module:pym.Parent\n         * @method _fire\n         * @inner\n         *\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Remove this parent from the page and unbind it's event handlers.\n         *\n         * @memberof module:pym.Parent\n         * @method remove\n         * @instance\n         */\n        this.remove = function() {\n            window.removeEventListener('message', this._processMessage);\n            window.removeEventListener('resize', this._onResize);\n\n            this.el.removeChild(this.iframe);\n            // _cleanAutoInitInstances in case this parent was autoInitialized\n            _cleanAutoInitInstances();\n        };\n\n        /**\n         * Process a new message from the child.\n         *\n         * @memberof module:pym.Parent\n         * @method _processMessage\n         * @inner\n         *\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Grab the message from the child and parse it.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or too many matches in the message, punt.\n            if (!match || match.length !== 3) {\n                return false;\n            }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new height message from child.\n         *\n         * @memberof module:pym.Parent\n         * @method _onHeightMessage\n         * @inner\n         *\n         * @param {String} message The new height.\n         */\n        this._onHeightMessage = function(message) {\n            /*\n             * Handle parent height message from child.\n             */\n            var height = parseInt(message);\n\n            this.iframe.setAttribute('height', height + 'px');\n        };\n\n        /**\n         * Navigate parent to a new url.\n         *\n         * @memberof module:pym.Parent\n         * @method _onNavigateToMessage\n         * @inner\n         *\n         * @param {String} message The url to navigate to.\n         */\n        this._onNavigateToMessage = function(message) {\n            /*\n             * Handle parent scroll message from child.\n             */\n            document.location.href = message;\n        };\n\n        /**\n         * Scroll parent to a given child position.\n         *\n         * @memberof module:pym.Parent\n         * @method _onScrollToChildPosMessage\n         * @inner\n         *\n         * @param {String} message The offset inside the child page.\n         */\n        this._onScrollToChildPosMessage = function(message) {\n            // Get the child container position using getBoundingClientRect + pageYOffset\n            // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n            var iframePos = document.getElementById(this.id).getBoundingClientRect().top + window.pageYOffset;\n\n            var totalOffset = iframePos + parseInt(message);\n            window.scrollTo(0, totalOffset);\n        };\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"height\", \"scrollTo\" and \"navigateTo\".\n         *\n         * @memberof module:pym.Parent\n         * @method onMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message being listened for.\n         * @param {module:pym.Parent~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * @callback module:pym.Parent~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n        /**\n         * Send a message to the the child.\n         *\n         * @memberof module:pym.Parent\n         * @method sendMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            // When used alongside with pjax some references are lost\n            if (this.el.getElementsByTagName('iframe').length) {\n                if (this.el.getElementsByTagName('iframe')[0].contentWindow) {\n                    this.el.getElementsByTagName('iframe')[0].contentWindow\n                        .postMessage(_makeMessage(this.id, messageType, message), '*');\n                }\n                else {\n                    // Contentless child detected remove listeners and iframe\n                    this.remove();\n                }\n            }\n        };\n\n        /**\n         * Transmit the current iframe width to the child.\n         *\n         * You shouldn't need to call this directly.\n         *\n         * @memberof module:pym.Parent\n         * @method sendWidth\n         * @instance\n         */\n        this.sendWidth = function() {\n            var width = this.el.offsetWidth.toString();\n            this.sendMessage('width', width);\n        };\n\n        /**\n         * Transmit the current viewport and iframe position to the child.\n         * Sends viewport width, viewport height\n         * and iframe bounding rect top-left-bottom-right\n         * all separated by spaces\n         *\n         * You shouldn't need to call this directly.\n         *\n         * @memberof module:pym.Parent\n         * @method sendViewportAndIFramePosition\n         * @instance\n         */\n        this.sendViewportAndIFramePosition = function() {\n            var iframeRect = this.iframe.getBoundingClientRect();\n            var vWidth   = window.innerWidth || document.documentElement.clientWidth;\n            var vHeight  = window.innerHeight || document.documentElement.clientHeight;\n            var payload = vWidth + ' ' + vHeight;\n            payload += ' ' + iframeRect.top + ' ' + iframeRect.left;\n            payload += ' ' + iframeRect.bottom + ' ' + iframeRect.right;\n            this.sendMessage('viewport-iframe-position', payload);\n        };\n\n        // Add any overrides to settings coming from config.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        /**\n         * Throttled scroll function.\n         *\n         * @memberof module:pym.Parent\n         * @method _throttleOnScroll\n         * @inner\n         */\n        this._throttleOnScroll = _throttle(this._onScroll.bind(this), this.settings.scrollwait);\n\n        // Bind required message handlers\n        this.onMessage('height', this._onHeightMessage);\n        this.onMessage('navigateTo', this._onNavigateToMessage);\n        this.onMessage('scrollToChildPos', this._onScrollToChildPosMessage);\n        this.onMessage('parentPositionInfo', this.sendViewportAndIFramePosition);\n\n        // Add a listener for processing messages from the child.\n        window.addEventListener('message', this._processMessage, false);\n\n        // Construct the iframe in the container element.\n        this._constructIframe();\n\n        return this;\n    };\n\n    /**\n     * The Child half of a responsive iframe.\n     *\n     * @memberof module:pym\n     * @class Child\n     * @param {Object} [config] Configuration for the child instance. sets {@link module:pym.Child~settings}\n     * @param {function} [config.renderCallback=null] Callback invoked after receiving a resize event from the parent, sets {@link module:pym.Child#settings.renderCallback}\n     * @param {string} [config.xdomain='*'] - xdomain to validate messages received\n     * @param {number} [config.polling=0] - polling frequency in milliseconds to send height to parent\n     * @param {number} [config.id] - parent container id used when navigating the child iframe to a new page but we want to keep it responsive.\n     * @param {string} [config.parenturlparam] - if passed it will be override the default parentUrl query string parameter name expected on the iframe src\n     */\n    lib.Child = function(config) {\n        /**\n         * The initial width of the parent page\n         *\n         * @memberof module:pym.Child\n         * @member {string} parentWidth\n         * @inner\n         */\n        this.parentWidth = null;\n        /**\n         * The id of the parent container\n         *\n         * @memberof module:pym.Child\n         * @member {String} id\n         * @inner\n         */\n        this.id = null;\n        /**\n         * The title of the parent page from document.title.\n         *\n         * @memberof module:pym.Child\n         * @member {String} parentTitle\n         * @inner\n         */\n        this.parentTitle = null;\n        /**\n         * The URL of the parent page from window.location.href.\n         *\n         * @memberof module:pym.Child\n         * @member {String} parentUrl\n         * @inner\n         */\n        this.parentUrl = null;\n        /**\n         * The settings for the child instance. Can be overriden by passing a config object to the child constructor\n         * i.e.: var pymChild = new pym.Child({renderCallback: render, xdomain: \"\\\\*\\.npr\\.org\"})\n         *\n         * @memberof module:pym.Child.settings\n         * @member {Object} settings - default settings for the child instance\n         * @inner\n         */\n        this.settings = {\n            renderCallback: null,\n            xdomain: '*',\n            polling: 0,\n            parenturlparam: 'parentUrl'\n        };\n\n        /**\n         * The timerId in order to be able to stop when polling is enabled\n         *\n         * @memberof module:pym.Child\n         * @member {String} timerId\n         * @inner\n         */\n        this.timerId = null;\n        /**\n         * RegularExpression to validate the received messages\n         *\n         * @memberof module:pym.Child\n         * @member {String} messageRegex\n         * @inner\n         */\n        this.messageRegex = null;\n        /**\n         * Stores the registered messageHandlers for each messageType\n         *\n         * @memberof module:pym.Child\n         * @member {Object} messageHandlers\n         * @inner\n         */\n        this.messageHandlers = {};\n\n        // Ensure a config object\n        config = (config || {});\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"width\".\n         *\n         * @memberof module:pym.Child\n         * @method onMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message being listened for.\n         * @param {module:pym.Child~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * @callback module:pym.Child~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof module:pym.Child\n         * @method _fire\n         * @inner\n         *\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            /*\n             * Fire all event handlers for a given message type.\n             */\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Process a new message from the parent.\n         *\n         * @memberof module:pym.Child\n         * @method _processMessage\n         * @inner\n         *\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            /*\n            * Process a new message from parent frame.\n            */\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Get the message from the parent.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or it's a bad format, punt.\n            if (!match || match.length !== 3) { return; }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new width message from parent.\n         *\n         * @memberof module:pym.Child\n         * @method _onWidthMessage\n         * @inner\n         *\n         * @param {String} message The new width.\n         */\n        this._onWidthMessage = function(message) {\n            /*\n             * Handle width message from the child.\n             */\n            var width = parseInt(message);\n\n            // Change the width if it's different.\n            if (width !== this.parentWidth) {\n                this.parentWidth = width;\n\n                // Call the callback function if it exists.\n                if (this.settings.renderCallback) {\n                    this.settings.renderCallback(width);\n                }\n\n                // Send the height back to the parent.\n                this.sendHeight();\n            }\n        };\n\n        /**\n         * Send a message to the the Parent.\n         *\n         * @memberof module:pym.Child\n         * @method sendMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            /*\n             * Send a message to the parent.\n             */\n            window.parent.postMessage(_makeMessage(this.id, messageType, message), '*');\n        };\n\n        /**\n         * Transmit the current iframe height to the parent.\n         *\n         * Call this directly in cases where you manually alter the height of the iframe contents.\n         *\n         * @memberof module:pym.Child\n         * @method sendHeight\n         * @instance\n         */\n        this.sendHeight = function() {\n            // Get the child's height.\n            var height = document.getElementsByTagName('body')[0].offsetHeight.toString();\n\n            // Send the height to the parent.\n            this.sendMessage('height', height);\n\n            return height;\n        }.bind(this);\n\n        /**\n         * Ask parent to send the current viewport and iframe position information\n         *\n         * @memberof module:pym.Child\n         * @method sendHeight\n         * @instance\n         */\n        this.getParentPositionInfo = function() {\n            // Send the height to the parent.\n            this.sendMessage('parentPositionInfo');\n        };\n\n        /**\n         * Scroll parent to a given element id.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentTo\n         * @instance\n         *\n         * @param {String} hash The id of the element to scroll to.\n         */\n        this.scrollParentTo = function(hash) {\n            this.sendMessage('navigateTo', '#' + hash);\n        };\n\n        /**\n         * Navigate parent to a given url.\n         *\n         * @memberof module:pym.Child\n         * @method navigateParentTo\n         * @instance\n         *\n         * @param {String} url The url to navigate to.\n         */\n        this.navigateParentTo = function(url) {\n            this.sendMessage('navigateTo', url);\n        };\n\n        /**\n         * Scroll parent to a given child element id.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentToChildEl\n         * @instance\n         *\n         * @param {String} id The id of the child element to scroll to.\n         */\n        this.scrollParentToChildEl = function(id) {\n            // Get the child element position using getBoundingClientRect + pageYOffset\n            // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n            var topPos = document.getElementById(id).getBoundingClientRect().top + window.pageYOffset;\n            this.scrollParentToChildPos(topPos);\n        };\n\n        /**\n         * Scroll parent to a particular child offset.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentToChildPos\n         * @instance\n         *\n         * @param {Number} pos The offset of the child element to scroll to.\n         */\n        this.scrollParentToChildPos = function(pos) {\n            this.sendMessage('scrollToChildPos', pos.toString());\n        };\n\n        /**\n         * Mark Whether the child is embedded or not\n         * executes a callback in case it was passed to the config\n         *\n         * @memberof module:pym.Child\n         * @method _markWhetherEmbedded\n         * @inner\n         *\n         * @param {module:pym.Child~onMarkedEmbeddedStatus} The callback to execute after determining whether embedded or not.\n         */\n        var _markWhetherEmbedded = function(onMarkedEmbeddedStatus) {\n          var htmlElement = document.getElementsByTagName('html')[0],\n              newClassForHtml,\n              originalHtmlClasses = htmlElement.className;\n          try {\n            if(window.self !== window.top) {\n              newClassForHtml = \"embedded\";\n            }else{\n              newClassForHtml = \"not-embedded\";\n            }\n          }catch(e) {\n            newClassForHtml = \"embedded\";\n          }\n          if(originalHtmlClasses.indexOf(newClassForHtml) < 0) {\n            htmlElement.className = originalHtmlClasses ? originalHtmlClasses + ' ' + newClassForHtml : newClassForHtml;\n            if(onMarkedEmbeddedStatus){\n              onMarkedEmbeddedStatus(newClassForHtml);\n            }\n            _raiseCustomEvent(\"marked-embedded\");\n          }\n        };\n\n        /**\n         * @callback module:pym.Child~onMarkedEmbeddedStatus\n         * @param {String} classname \"embedded\" or \"not-embedded\".\n         */\n\n        /**\n         * Unbind child event handlers and timers.\n         *\n         * @memberof module:pym.Child\n         * @method remove\n         * @instance\n         */\n        this.remove = function() {\n            window.removeEventListener('message', this._processMessage);\n            if (this.timerId) {\n                clearInterval(this.timerId);\n            }\n        };\n\n        // Initialize settings with overrides.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        // Identify what ID the parent knows this child as.\n        this.id = _getParameterByName('childId') || config.id;\n        this.messageRegex = new RegExp('^pym' + MESSAGE_DELIMITER + this.id + MESSAGE_DELIMITER + '(\\\\S+)' + MESSAGE_DELIMITER + '(.*)$');\n\n        // Get the initial width from a URL parameter.\n        var width = parseInt(_getParameterByName('initialWidth'));\n\n        // Get the url of the parent frame\n        this.parentUrl = _getParameterByName(this.settings.parenturlparam);\n\n        // Get the title of the parent frame\n        this.parentTitle = _getParameterByName('parentTitle');\n\n        // Bind the required message handlers\n        this.onMessage('width', this._onWidthMessage);\n\n        // Set up a listener to handle any incoming messages.\n        window.addEventListener('message', this._processMessage, false);\n\n        // If there's a callback function, call it.\n        if (this.settings.renderCallback) {\n            this.settings.renderCallback(width);\n        }\n\n        // Send the initial height to the parent.\n        this.sendHeight();\n\n        // If we're configured to poll, create a setInterval to handle that.\n        if (this.settings.polling) {\n            this.timerId = window.setInterval(this.sendHeight, this.settings.polling);\n        }\n\n        _markWhetherEmbedded(config.onMarkedEmbeddedStatus);\n\n        return this;\n    };\n\n    // Initialize elements with pym data attributes\n    // if we are not in server configuration\n    if(typeof document !== \"undefined\") {\n        lib.autoInit(true);\n    }\n\n    return lib;\n});\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/*! pym.js - v1.3.2 - 2017-08-13 */\n/*\n* Pym.js is library that resizes an iframe based on the width of the parent and the resulting height of the child.\n* Check out the docs at http://blog.apps.npr.org/pym.js/ or the readme at README.md for usage.\n*/\n\n/** @module pym */\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    }\n    else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = factory();\n    } else {\n      if (typeof window.pym === 'undefined') {\n        window.pym = factory.call(this);\n      }\n    }\n})(function() {\n    var MESSAGE_DELIMITER = 'xPYMx';\n\n    var lib = {};\n\n    /**\n    * Create and dispatch a custom pym event\n    *\n    * @method _raiseCustomEvent\n    * @inner\n    *\n    * @param {String} eventName\n    */\n   var _raiseCustomEvent = function(eventName) {\n     var event = document.createEvent('Event');\n     event.initEvent('pym:' + eventName, true, true);\n     document.dispatchEvent(event);\n   };\n\n    /**\n    * Generic function for parsing URL params.\n    * Via http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\n    *\n    * @method _getParameterByName\n    * @inner\n    *\n    * @param {String} name The name of the paramter to get from the URL.\n    */\n    var _getParameterByName = function(name) {\n        var regex = new RegExp(\"[\\\\?&]\" + name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]') + '=([^&#]*)');\n        var results = regex.exec(location.search);\n\n        if (results === null) {\n            return '';\n        }\n\n        return decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    };\n\n    /**\n     * Check the message to make sure it comes from an acceptable xdomain.\n     * Defaults to '*' but can be overriden in config.\n     *\n     * @method _isSafeMessage\n     * @inner\n     *\n     * @param {Event} e The message event.\n     * @param {Object} settings Configuration.\n     */\n    var _isSafeMessage = function(e, settings) {\n        if (settings.xdomain !== '*') {\n            // If origin doesn't match our xdomain, return.\n            if (!e.origin.match(new RegExp(settings.xdomain + '$'))) { return; }\n        }\n\n        // Ignore events that do not carry string data #151\n        if (typeof e.data !== 'string') { return; }\n\n        return true;\n    };\n\n    /**\n     * Construct a message to send between frames.\n     *\n     * NB: We use string-building here because JSON message passing is\n     * not supported in all browsers.\n     *\n     * @method _makeMessage\n     * @inner\n     *\n     * @param {String} id The unique id of the message recipient.\n     * @param {String} messageType The type of message to send.\n     * @param {String} message The message to send.\n     */\n    var _makeMessage = function(id, messageType, message) {\n        var bits = ['pym', id, messageType, message];\n\n        return bits.join(MESSAGE_DELIMITER);\n    };\n\n    /**\n     * Construct a regex to validate and parse messages.\n     *\n     * @method _makeMessageRegex\n     * @inner\n     *\n     * @param {String} id The unique id of the message recipient.\n     */\n    var _makeMessageRegex = function(id) {\n        var bits = ['pym', id, '(\\\\S+)', '(.*)'];\n\n        return new RegExp('^' + bits.join(MESSAGE_DELIMITER) + '$');\n    };\n\n    /**\n    * Underscore implementation of getNow\n    *\n    * @method _getNow\n    * @inner\n    *\n    */\n    var _getNow = Date.now || function() {\n        return new Date().getTime();\n    };\n\n    /**\n    * Underscore implementation of throttle\n    *\n    * @method _throttle\n    * @inner\n    *\n    * @param {function} func Throttled function\n    * @param {number} wait Throttle wait time\n    * @param {object} options Throttle settings\n    */\n\n    var _throttle = function(func, wait, options) {\n        var context, args, result;\n        var timeout = null;\n        var previous = 0;\n        if (!options) {options = {};}\n        var later = function() {\n            previous = options.leading === false ? 0 : _getNow();\n            timeout = null;\n            result = func.apply(context, args);\n            if (!timeout) {context = args = null;}\n        };\n        return function() {\n            var now = _getNow();\n            if (!previous && options.leading === false) {previous = now;}\n            var remaining = wait - (now - previous);\n            context = this;\n            args = arguments;\n            if (remaining <= 0 || remaining > wait) {\n                if (timeout) {\n                    clearTimeout(timeout);\n                    timeout = null;\n                }\n                previous = now;\n                result = func.apply(context, args);\n                if (!timeout) {context = args = null;}\n            } else if (!timeout && options.trailing !== false) {\n                timeout = setTimeout(later, remaining);\n            }\n            return result;\n        };\n    };\n\n    /**\n     * Clean autoInit Instances: those that point to contentless iframes\n     * @method _cleanAutoInitInstances\n     * @inner\n     */\n    var _cleanAutoInitInstances = function() {\n        var length = lib.autoInitInstances.length;\n\n        // Loop backwards to avoid index issues\n        for (var idx = length - 1; idx >= 0; idx--) {\n            var instance = lib.autoInitInstances[idx];\n            // If instance has been removed or is contentless then remove it\n            if (instance.el.getElementsByTagName('iframe').length &&\n                instance.el.getElementsByTagName('iframe')[0].contentWindow) {\n                continue;\n            }\n            else {\n                // Remove the reference to the removed or orphan instance\n                lib.autoInitInstances.splice(idx,1);\n            }\n        }\n    };\n\n    /**\n     * Store auto initialized Pym instances for further reference\n     * @name module:pym#autoInitInstances\n     * @type Array\n     * @default []\n     */\n    lib.autoInitInstances = [];\n\n    /**\n     * Initialize Pym for elements on page that have data-pym attributes.\n     * Expose autoinit in case we need to call it from the outside\n     * @instance\n     * @method autoInit\n     * @param {Boolean} doNotRaiseEvents flag to avoid sending custom events\n     */\n    lib.autoInit = function(doNotRaiseEvents) {\n        var elements = document.querySelectorAll('[data-pym-src]:not([data-pym-auto-initialized])');\n        var length = elements.length;\n\n        // Clean stored instances in case needed\n        _cleanAutoInitInstances();\n        for (var idx = 0; idx < length; ++idx) {\n            var element = elements[idx];\n            /*\n            * Mark automatically-initialized elements so they are not\n            * re-initialized if the user includes pym.js more than once in the\n            * same document.\n            */\n            element.setAttribute('data-pym-auto-initialized', '');\n\n            // Ensure elements have an id\n            if (element.id === '') {\n                element.id = 'pym-' + idx + \"-\" + Math.random().toString(36).substr(2,5);\n            }\n\n            var src = element.getAttribute('data-pym-src');\n\n            // List of data attributes to configure the component\n            // structure: {'attribute name': 'type'}\n            var settings = {'xdomain': 'string', 'title': 'string', 'name': 'string', 'id': 'string',\n                            'sandbox': 'string', 'allowfullscreen': 'boolean',\n                            'parenturlparam': 'string', 'parenturlvalue': 'string',\n                            'optionalparams': 'boolean', 'trackscroll': 'boolean',\n                            'scrollwait': 'number'};\n\n            var config = {};\n\n            for (var attribute in settings) {\n                // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute#Notes\n               if (element.getAttribute('data-pym-'+attribute) !== null) {\n                  switch (settings[attribute]) {\n                    case 'boolean':\n                       config[attribute] = !(element.getAttribute('data-pym-'+attribute) === 'false'); // jshint ignore:line\n                       break;\n                    case 'string':\n                       config[attribute] = element.getAttribute('data-pym-'+attribute);\n                       break;\n                    case 'number':\n                        var n = Number(element.getAttribute('data-pym-'+attribute));\n                        if (!isNaN(n)) {\n                            config[attribute] = n;\n                        }\n                        break;\n                    default:\n                       console.err('unrecognized attribute type');\n                  }\n               }\n            }\n\n            // Store references to autoinitialized pym instances\n            var parent = new lib.Parent(element.id, src, config);\n            lib.autoInitInstances.push(parent);\n        }\n\n        // Fire customEvent\n        if (!doNotRaiseEvents) {\n            _raiseCustomEvent(\"pym-initialized\");\n        }\n        // Return stored autoinitalized pym instances\n        return lib.autoInitInstances;\n    };\n\n    /**\n     * The Parent half of a response iframe.\n     *\n     * @memberof module:pym\n     * @class Parent\n     * @param {String} id The id of the div into which the iframe will be rendered. sets {@link module:pym.Parent~id}\n     * @param {String} url The url of the iframe source. sets {@link module:pym.Parent~url}\n     * @param {Object} [config] Configuration for the parent instance. sets {@link module:pym.Parent~settings}\n     * @param {string} [config.xdomain='*'] - xdomain to validate messages received\n     * @param {string} [config.title] - if passed it will be assigned to the iframe title attribute\n     * @param {string} [config.name] - if passed it will be assigned to the iframe name attribute\n     * @param {string} [config.id] - if passed it will be assigned to the iframe id attribute\n     * @param {boolean} [config.allowfullscreen] - if passed and different than false it will be assigned to the iframe allowfullscreen attribute\n     * @param {string} [config.sandbox] - if passed it will be assigned to the iframe sandbox attribute (we do not validate the syntax so be careful!!)\n     * @param {string} [config.parenturlparam] - if passed it will be override the default parentUrl query string parameter name passed to the iframe src\n     * @param {string} [config.parenturlvalue] - if passed it will be override the default parentUrl query string parameter value passed to the iframe src\n     * @param {string} [config.optionalparams] - if passed and different than false it will strip the querystring params parentUrl and parentTitle passed to the iframe src\n     * @param {boolean} [config.trackscroll] - if passed it will activate scroll tracking on the parent\n     * @param {number} [config.scrollwait] - if passed it will set the throttle wait in order to fire scroll messaging. Defaults to 100 ms.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe iFrame}\n     */\n    lib.Parent = function(id, url, config) {\n        /**\n         * The id of the container element\n         *\n         * @memberof module:pym.Parent\n         * @member {string} id\n         * @inner\n         */\n        this.id = id;\n        /**\n         * The url that will be set as the iframe's src\n         *\n         * @memberof module:pym.Parent\n         * @member {String} url\n         * @inner\n         */\n        this.url = url;\n\n        /**\n         * The container DOM object\n         *\n         * @memberof module:pym.Parent\n         * @member {HTMLElement} el\n         * @inner\n         */\n        this.el = document.getElementById(id);\n        /**\n         * The contained child iframe\n         *\n         * @memberof module:pym.Parent\n         * @member {HTMLElement} iframe\n         * @inner\n         * @default null\n         */\n        this.iframe = null;\n        /**\n         * The parent instance settings, updated by the values passed in the config object\n         *\n         * @memberof module:pym.Parent\n         * @member {Object} settings\n         * @inner\n         */\n        this.settings = {\n            xdomain: '*',\n            optionalparams: true,\n            parenturlparam: 'parentUrl',\n            parenturlvalue: window.location.href,\n            trackscroll: false,\n            scrollwait: 100,\n        };\n        /**\n         * RegularExpression to validate the received messages\n         *\n         * @memberof module:pym.Parent\n         * @member {String} messageRegex\n         * @inner\n         */\n        this.messageRegex = _makeMessageRegex(this.id);\n        /**\n         * Stores the registered messageHandlers for each messageType\n         *\n         * @memberof module:pym.Parent\n         * @member {Object} messageHandlers\n         * @inner\n         */\n        this.messageHandlers = {};\n\n        // ensure a config object\n        config = (config || {});\n\n        /**\n         * Construct the iframe.\n         *\n         * @memberof module:pym.Parent\n         * @method _constructIframe\n         * @inner\n         */\n        this._constructIframe = function() {\n            // Calculate the width of this element.\n            var width = this.el.offsetWidth.toString();\n\n            // Create an iframe element attached to the document.\n            this.iframe = document.createElement('iframe');\n\n            // Save fragment id\n            var hash = '';\n            var hashIndex = this.url.indexOf('#');\n\n            if (hashIndex > -1) {\n                hash = this.url.substring(hashIndex, this.url.length);\n                this.url = this.url.substring(0, hashIndex);\n            }\n\n            // If the URL contains querystring bits, use them.\n            // Otherwise, just create a set of valid params.\n            if (this.url.indexOf('?') < 0) {\n                this.url += '?';\n            } else {\n                this.url += '&';\n            }\n\n            // Append the initial width as a querystring parameter\n            // and optional params if configured to do so\n            this.iframe.src = this.url + 'initialWidth=' + width +\n                                         '&childId=' + this.id;\n\n            if (this.settings.optionalparams) {\n                this.iframe.src += '&parentTitle=' + encodeURIComponent(document.title);\n                this.iframe.src += '&'+ this.settings.parenturlparam + '=' + encodeURIComponent(this.settings.parenturlvalue);\n            }\n            this.iframe.src +=hash;\n\n            // Set some attributes to this proto-iframe.\n            this.iframe.setAttribute('width', '100%');\n            this.iframe.setAttribute('scrolling', 'no');\n            this.iframe.setAttribute('marginheight', '0');\n            this.iframe.setAttribute('frameborder', '0');\n\n            if (this.settings.title) {\n                this.iframe.setAttribute('title', this.settings.title);\n            }\n\n            if (this.settings.allowfullscreen !== undefined && this.settings.allowfullscreen !== false) {\n                this.iframe.setAttribute('allowfullscreen','');\n            }\n\n            if (this.settings.sandbox !== undefined && typeof this.settings.sandbox === 'string') {\n                this.iframe.setAttribute('sandbox', this.settings.sandbox);\n            }\n\n            if (this.settings.id) {\n                if (!document.getElementById(this.settings.id)) {\n                    this.iframe.setAttribute('id', this.settings.id);\n                }\n            }\n\n            if (this.settings.name) {\n                this.iframe.setAttribute('name', this.settings.name);\n            }\n\n            // Replace the child content if needed\n            // (some CMSs might strip out empty elements)\n            while(this.el.firstChild) { this.el.removeChild(this.el.firstChild); }\n            // Append the iframe to our element.\n            this.el.appendChild(this.iframe);\n\n            // Add an event listener that will handle redrawing the child on resize.\n            window.addEventListener('resize', this._onResize);\n\n            // Add an event listener that will send the child the viewport.\n            if (this.settings.trackscroll) {\n                window.addEventListener('scroll', this._throttleOnScroll);\n            }\n        };\n\n        /**\n         * Send width on resize.\n         *\n         * @memberof module:pym.Parent\n         * @method _onResize\n         * @inner\n         */\n        this._onResize = function() {\n            this.sendWidth();\n            if (this.settings.trackscroll) {\n                this.sendViewportAndIFramePosition();\n            }\n        }.bind(this);\n\n        /**\n         * Send viewport and iframe info on scroll.\n         *\n         * @memberof module:pym.Parent\n         * @method _onScroll\n         * @inner\n         */\n        this._onScroll = function() {\n            this.sendViewportAndIFramePosition();\n        }.bind(this);\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof module:pym.Parent\n         * @method _fire\n         * @inner\n         *\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Remove this parent from the page and unbind it's event handlers.\n         *\n         * @memberof module:pym.Parent\n         * @method remove\n         * @instance\n         */\n        this.remove = function() {\n            window.removeEventListener('message', this._processMessage);\n            window.removeEventListener('resize', this._onResize);\n\n            this.el.removeChild(this.iframe);\n            // _cleanAutoInitInstances in case this parent was autoInitialized\n            _cleanAutoInitInstances();\n        };\n\n        /**\n         * Process a new message from the child.\n         *\n         * @memberof module:pym.Parent\n         * @method _processMessage\n         * @inner\n         *\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Grab the message from the child and parse it.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or too many matches in the message, punt.\n            if (!match || match.length !== 3) {\n                return false;\n            }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new height message from child.\n         *\n         * @memberof module:pym.Parent\n         * @method _onHeightMessage\n         * @inner\n         *\n         * @param {String} message The new height.\n         */\n        this._onHeightMessage = function(message) {\n            /*\n             * Handle parent height message from child.\n             */\n            var height = parseInt(message);\n\n            this.iframe.setAttribute('height', height + 'px');\n        };\n\n        /**\n         * Navigate parent to a new url.\n         *\n         * @memberof module:pym.Parent\n         * @method _onNavigateToMessage\n         * @inner\n         *\n         * @param {String} message The url to navigate to.\n         */\n        this._onNavigateToMessage = function(message) {\n            /*\n             * Handle parent scroll message from child.\n             */\n            document.location.href = message;\n        };\n\n        /**\n         * Scroll parent to a given child position.\n         *\n         * @memberof module:pym.Parent\n         * @method _onScrollToChildPosMessage\n         * @inner\n         *\n         * @param {String} message The offset inside the child page.\n         */\n        this._onScrollToChildPosMessage = function(message) {\n            // Get the child container position using getBoundingClientRect + pageYOffset\n            // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n            var iframePos = document.getElementById(this.id).getBoundingClientRect().top + window.pageYOffset;\n\n            var totalOffset = iframePos + parseInt(message);\n            window.scrollTo(0, totalOffset);\n        };\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"height\", \"scrollTo\" and \"navigateTo\".\n         *\n         * @memberof module:pym.Parent\n         * @method onMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message being listened for.\n         * @param {module:pym.Parent~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * @callback module:pym.Parent~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n        /**\n         * Send a message to the the child.\n         *\n         * @memberof module:pym.Parent\n         * @method sendMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            // When used alongside with pjax some references are lost\n            if (this.el.getElementsByTagName('iframe').length) {\n                if (this.el.getElementsByTagName('iframe')[0].contentWindow) {\n                    this.el.getElementsByTagName('iframe')[0].contentWindow\n                        .postMessage(_makeMessage(this.id, messageType, message), '*');\n                }\n                else {\n                    // Contentless child detected remove listeners and iframe\n                    this.remove();\n                }\n            }\n        };\n\n        /**\n         * Transmit the current iframe width to the child.\n         *\n         * You shouldn't need to call this directly.\n         *\n         * @memberof module:pym.Parent\n         * @method sendWidth\n         * @instance\n         */\n        this.sendWidth = function() {\n            var width = this.el.offsetWidth.toString();\n            this.sendMessage('width', width);\n        };\n\n        /**\n         * Transmit the current viewport and iframe position to the child.\n         * Sends viewport width, viewport height\n         * and iframe bounding rect top-left-bottom-right\n         * all separated by spaces\n         *\n         * You shouldn't need to call this directly.\n         *\n         * @memberof module:pym.Parent\n         * @method sendViewportAndIFramePosition\n         * @instance\n         */\n        this.sendViewportAndIFramePosition = function() {\n            var iframeRect = this.iframe.getBoundingClientRect();\n            var vWidth   = window.innerWidth || document.documentElement.clientWidth;\n            var vHeight  = window.innerHeight || document.documentElement.clientHeight;\n            var payload = vWidth + ' ' + vHeight;\n            payload += ' ' + iframeRect.top + ' ' + iframeRect.left;\n            payload += ' ' + iframeRect.bottom + ' ' + iframeRect.right;\n            this.sendMessage('viewport-iframe-position', payload);\n        };\n\n        // Add any overrides to settings coming from config.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        /**\n         * Throttled scroll function.\n         *\n         * @memberof module:pym.Parent\n         * @method _throttleOnScroll\n         * @inner\n         */\n        this._throttleOnScroll = _throttle(this._onScroll.bind(this), this.settings.scrollwait);\n\n        // Bind required message handlers\n        this.onMessage('height', this._onHeightMessage);\n        this.onMessage('navigateTo', this._onNavigateToMessage);\n        this.onMessage('scrollToChildPos', this._onScrollToChildPosMessage);\n        this.onMessage('parentPositionInfo', this.sendViewportAndIFramePosition);\n\n        // Add a listener for processing messages from the child.\n        window.addEventListener('message', this._processMessage, false);\n\n        // Construct the iframe in the container element.\n        this._constructIframe();\n\n        return this;\n    };\n\n    /**\n     * The Child half of a responsive iframe.\n     *\n     * @memberof module:pym\n     * @class Child\n     * @param {Object} [config] Configuration for the child instance. sets {@link module:pym.Child~settings}\n     * @param {function} [config.renderCallback=null] Callback invoked after receiving a resize event from the parent, sets {@link module:pym.Child#settings.renderCallback}\n     * @param {string} [config.xdomain='*'] - xdomain to validate messages received\n     * @param {number} [config.polling=0] - polling frequency in milliseconds to send height to parent\n     * @param {number} [config.id] - parent container id used when navigating the child iframe to a new page but we want to keep it responsive.\n     * @param {string} [config.parenturlparam] - if passed it will be override the default parentUrl query string parameter name expected on the iframe src\n     */\n    lib.Child = function(config) {\n        /**\n         * The initial width of the parent page\n         *\n         * @memberof module:pym.Child\n         * @member {string} parentWidth\n         * @inner\n         */\n        this.parentWidth = null;\n        /**\n         * The id of the parent container\n         *\n         * @memberof module:pym.Child\n         * @member {String} id\n         * @inner\n         */\n        this.id = null;\n        /**\n         * The title of the parent page from document.title.\n         *\n         * @memberof module:pym.Child\n         * @member {String} parentTitle\n         * @inner\n         */\n        this.parentTitle = null;\n        /**\n         * The URL of the parent page from window.location.href.\n         *\n         * @memberof module:pym.Child\n         * @member {String} parentUrl\n         * @inner\n         */\n        this.parentUrl = null;\n        /**\n         * The settings for the child instance. Can be overriden by passing a config object to the child constructor\n         * i.e.: var pymChild = new pym.Child({renderCallback: render, xdomain: \"\\\\*\\.npr\\.org\"})\n         *\n         * @memberof module:pym.Child.settings\n         * @member {Object} settings - default settings for the child instance\n         * @inner\n         */\n        this.settings = {\n            renderCallback: null,\n            xdomain: '*',\n            polling: 0,\n            parenturlparam: 'parentUrl'\n        };\n\n        /**\n         * The timerId in order to be able to stop when polling is enabled\n         *\n         * @memberof module:pym.Child\n         * @member {String} timerId\n         * @inner\n         */\n        this.timerId = null;\n        /**\n         * RegularExpression to validate the received messages\n         *\n         * @memberof module:pym.Child\n         * @member {String} messageRegex\n         * @inner\n         */\n        this.messageRegex = null;\n        /**\n         * Stores the registered messageHandlers for each messageType\n         *\n         * @memberof module:pym.Child\n         * @member {Object} messageHandlers\n         * @inner\n         */\n        this.messageHandlers = {};\n\n        // Ensure a config object\n        config = (config || {});\n\n        /**\n         * Bind a callback to a given messageType from the child.\n         *\n         * Reserved message names are: \"width\".\n         *\n         * @memberof module:pym.Child\n         * @method onMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message being listened for.\n         * @param {module:pym.Child~onMessageCallback} callback The callback to invoke when a message of the given type is received.\n         */\n        this.onMessage = function(messageType, callback) {\n\n            if (!(messageType in this.messageHandlers)) {\n                this.messageHandlers[messageType] = [];\n            }\n\n            this.messageHandlers[messageType].push(callback);\n        };\n\n        /**\n         * @callback module:pym.Child~onMessageCallback\n         * @param {String} message The message data.\n         */\n\n\n        /**\n         * Fire all event handlers for a given message type.\n         *\n         * @memberof module:pym.Child\n         * @method _fire\n         * @inner\n         *\n         * @param {String} messageType The type of message.\n         * @param {String} message The message data.\n         */\n        this._fire = function(messageType, message) {\n            /*\n             * Fire all event handlers for a given message type.\n             */\n            if (messageType in this.messageHandlers) {\n                for (var i = 0; i < this.messageHandlers[messageType].length; i++) {\n                   this.messageHandlers[messageType][i].call(this, message);\n                }\n            }\n        };\n\n        /**\n         * Process a new message from the parent.\n         *\n         * @memberof module:pym.Child\n         * @method _processMessage\n         * @inner\n         *\n         * @param {Event} e A message event.\n         */\n        this._processMessage = function(e) {\n            /*\n            * Process a new message from parent frame.\n            */\n            // First, punt if this isn't from an acceptable xdomain.\n            if (!_isSafeMessage(e, this.settings)) {\n                return;\n            }\n\n            // Discard object messages, we only care about strings\n            if (typeof e.data !== 'string') {\n                return;\n            }\n\n            // Get the message from the parent.\n            var match = e.data.match(this.messageRegex);\n\n            // If there's no match or it's a bad format, punt.\n            if (!match || match.length !== 3) { return; }\n\n            var messageType = match[1];\n            var message = match[2];\n\n            this._fire(messageType, message);\n        }.bind(this);\n\n        /**\n         * Resize iframe in response to new width message from parent.\n         *\n         * @memberof module:pym.Child\n         * @method _onWidthMessage\n         * @inner\n         *\n         * @param {String} message The new width.\n         */\n        this._onWidthMessage = function(message) {\n            /*\n             * Handle width message from the child.\n             */\n            var width = parseInt(message);\n\n            // Change the width if it's different.\n            if (width !== this.parentWidth) {\n                this.parentWidth = width;\n\n                // Call the callback function if it exists.\n                if (this.settings.renderCallback) {\n                    this.settings.renderCallback(width);\n                }\n\n                // Send the height back to the parent.\n                this.sendHeight();\n            }\n        };\n\n        /**\n         * Send a message to the the Parent.\n         *\n         * @memberof module:pym.Child\n         * @method sendMessage\n         * @instance\n         *\n         * @param {String} messageType The type of message to send.\n         * @param {String} message The message data to send.\n         */\n        this.sendMessage = function(messageType, message) {\n            /*\n             * Send a message to the parent.\n             */\n            window.parent.postMessage(_makeMessage(this.id, messageType, message), '*');\n        };\n\n        /**\n         * Transmit the current iframe height to the parent.\n         *\n         * Call this directly in cases where you manually alter the height of the iframe contents.\n         *\n         * @memberof module:pym.Child\n         * @method sendHeight\n         * @instance\n         */\n        this.sendHeight = function() {\n            // Get the child's height.\n            var height = document.getElementsByTagName('body')[0].offsetHeight.toString();\n\n            // Send the height to the parent.\n            this.sendMessage('height', height);\n\n            return height;\n        }.bind(this);\n\n        /**\n         * Ask parent to send the current viewport and iframe position information\n         *\n         * @memberof module:pym.Child\n         * @method sendHeight\n         * @instance\n         */\n        this.getParentPositionInfo = function() {\n            // Send the height to the parent.\n            this.sendMessage('parentPositionInfo');\n        };\n\n        /**\n         * Scroll parent to a given element id.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentTo\n         * @instance\n         *\n         * @param {String} hash The id of the element to scroll to.\n         */\n        this.scrollParentTo = function(hash) {\n            this.sendMessage('navigateTo', '#' + hash);\n        };\n\n        /**\n         * Navigate parent to a given url.\n         *\n         * @memberof module:pym.Child\n         * @method navigateParentTo\n         * @instance\n         *\n         * @param {String} url The url to navigate to.\n         */\n        this.navigateParentTo = function(url) {\n            this.sendMessage('navigateTo', url);\n        };\n\n        /**\n         * Scroll parent to a given child element id.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentToChildEl\n         * @instance\n         *\n         * @param {String} id The id of the child element to scroll to.\n         */\n        this.scrollParentToChildEl = function(id) {\n            // Get the child element position using getBoundingClientRect + pageYOffset\n            // via https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n            var topPos = document.getElementById(id).getBoundingClientRect().top + window.pageYOffset;\n            this.scrollParentToChildPos(topPos);\n        };\n\n        /**\n         * Scroll parent to a particular child offset.\n         *\n         * @memberof module:pym.Child\n         * @method scrollParentToChildPos\n         * @instance\n         *\n         * @param {Number} pos The offset of the child element to scroll to.\n         */\n        this.scrollParentToChildPos = function(pos) {\n            this.sendMessage('scrollToChildPos', pos.toString());\n        };\n\n        /**\n         * Mark Whether the child is embedded or not\n         * executes a callback in case it was passed to the config\n         *\n         * @memberof module:pym.Child\n         * @method _markWhetherEmbedded\n         * @inner\n         *\n         * @param {module:pym.Child~onMarkedEmbeddedStatus} The callback to execute after determining whether embedded or not.\n         */\n        var _markWhetherEmbedded = function(onMarkedEmbeddedStatus) {\n          var htmlElement = document.getElementsByTagName('html')[0],\n              newClassForHtml,\n              originalHtmlClasses = htmlElement.className;\n          try {\n            if(window.self !== window.top) {\n              newClassForHtml = \"embedded\";\n            }else{\n              newClassForHtml = \"not-embedded\";\n            }\n          }catch(e) {\n            newClassForHtml = \"embedded\";\n          }\n          if(originalHtmlClasses.indexOf(newClassForHtml) < 0) {\n            htmlElement.className = originalHtmlClasses ? originalHtmlClasses + ' ' + newClassForHtml : newClassForHtml;\n            if(onMarkedEmbeddedStatus){\n              onMarkedEmbeddedStatus(newClassForHtml);\n            }\n            _raiseCustomEvent(\"marked-embedded\");\n          }\n        };\n\n        /**\n         * @callback module:pym.Child~onMarkedEmbeddedStatus\n         * @param {String} classname \"embedded\" or \"not-embedded\".\n         */\n\n        /**\n         * Unbind child event handlers and timers.\n         *\n         * @memberof module:pym.Child\n         * @method remove\n         * @instance\n         */\n        this.remove = function() {\n            window.removeEventListener('message', this._processMessage);\n            if (this.timerId) {\n                clearInterval(this.timerId);\n            }\n        };\n\n        // Initialize settings with overrides.\n        for (var key in config) {\n            this.settings[key] = config[key];\n        }\n\n        // Identify what ID the parent knows this child as.\n        this.id = _getParameterByName('childId') || config.id;\n        this.messageRegex = new RegExp('^pym' + MESSAGE_DELIMITER + this.id + MESSAGE_DELIMITER + '(\\\\S+)' + MESSAGE_DELIMITER + '(.*)$');\n\n        // Get the initial width from a URL parameter.\n        var width = parseInt(_getParameterByName('initialWidth'));\n\n        // Get the url of the parent frame\n        this.parentUrl = _getParameterByName(this.settings.parenturlparam);\n\n        // Get the title of the parent frame\n        this.parentTitle = _getParameterByName('parentTitle');\n\n        // Bind the required message handlers\n        this.onMessage('width', this._onWidthMessage);\n\n        // Set up a listener to handle any incoming messages.\n        window.addEventListener('message', this._processMessage, false);\n\n        // If there's a callback function, call it.\n        if (this.settings.renderCallback) {\n            this.settings.renderCallback(width);\n        }\n\n        // Send the initial height to the parent.\n        this.sendHeight();\n\n        // If we're configured to poll, create a setInterval to handle that.\n        if (this.settings.polling) {\n            this.timerId = window.setInterval(this.sendHeight, this.settings.polling);\n        }\n\n        _markWhetherEmbedded(config.onMarkedEmbeddedStatus);\n\n        return this;\n    };\n\n    // Initialize elements with pym data attributes\n    // if we are not in server configuration\n    if(typeof document !== \"undefined\") {\n        lib.autoInit(true);\n    }\n\n    return lib;\n});\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar _pym = require('pym.js');\n\nvar _pym2 = _interopRequireDefault(_pym);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar werks = document.querySelectorAll('.chartwerk'); // Uses POLITICO fork of pym.js: https://github.com/The-Politico/pym.js\n// Checks for existence of pym before setting global.\n\n\nfor (var i = 0; i < werks.length; i++) {\n  var werk = werks[i];\n  var id = werk.dataset.id;\n  var chartPath = werk.dataset.src;\n  var paths = {\n    single: '' + chartPath + id + '_single.html',\n    double: '' + chartPath + id + '.html'\n  };\n  var dimensions = JSON.parse(werk.dataset.dimensions);\n  var size = werk.dataset.size;\n  var viewportWidth = werk.parentElement.clientWidth;\n  var pymParent = void 0;\n  // Check if iframe already embedded. (Handles for multiple embedded charts...)\n  if (werk.querySelectorAll('iframe').length < 1) {\n    // double-wide\n    if (size === 'double') {\n      if (viewportWidth > dimensions.double.width) {\n        werk.style.width = '100%';\n        pymParent = new _pym2.default.Parent(werk.id, paths.double, {});\n      } else {\n        werk.style.width = dimensions.single.width + 'px';\n        pymParent = new _pym2.default.Parent(werk.id, paths.single, {});\n        // Add a class which can be used to float div\n        if (viewportWidth > dimensions.single.width * 1.75) {\n          werk.classList.add('floated');\n        }\n      }\n      // single-wide\n    } else {\n      werk.style.width = dimensions.single.width + 'px';\n      pymParent = new _pym2.default.Parent(werk.id, paths.single, {});\n      // Add a class which can be used to float div\n      if (viewportWidth > dimensions.single.width * 1.75) {\n        werk.classList.add('floated');\n      }\n    }\n  }\n}\n\n\n},{\"pym.js\":1}]},{},[2])\n\n","'use strict';\n\nvar _pym = require('pym.js');\n\nvar _pym2 = _interopRequireDefault(_pym);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar werks = document.querySelectorAll('.chartwerk'); // Uses POLITICO fork of pym.js: https://github.com/The-Politico/pym.js\n// Checks for existence of pym before setting global.\n\n\nfor (var i = 0; i < werks.length; i++) {\n  var werk = werks[i];\n  var id = werk.dataset.id;\n  var chartPath = werk.dataset.src;\n  var paths = {\n    single: '' + chartPath + id + '_single.html',\n    double: '' + chartPath + id + '.html'\n  };\n  var dimensions = JSON.parse(werk.dataset.dimensions);\n  var size = werk.dataset.size;\n  var viewportWidth = werk.parentElement.clientWidth;\n  var pymParent = void 0;\n  // Check if iframe already embedded. (Handles for multiple embedded charts...)\n  if (werk.querySelectorAll('iframe').length < 1) {\n    // double-wide\n    if (size === 'double') {\n      if (viewportWidth > dimensions.double.width) {\n        werk.style.width = '100%';\n        pymParent = new _pym2.default.Parent(werk.id, paths.double, {});\n      } else {\n        werk.style.width = dimensions.single.width + 'px';\n        pymParent = new _pym2.default.Parent(werk.id, paths.single, {});\n        // Add a class which can be used to float div\n        if (viewportWidth > dimensions.single.width * 1.75) {\n          werk.classList.add('floated');\n        }\n      }\n      // single-wide\n    } else {\n      werk.style.width = dimensions.single.width + 'px';\n      pymParent = new _pym2.default.Parent(werk.id, paths.single, {});\n      // Add a class which can be used to float div\n      if (viewportWidth > dimensions.single.width * 1.75) {\n        werk.classList.add('floated');\n      }\n    }\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4tZW1iZWQuanMiXSwibmFtZXMiOlsid2Vya3MiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwibGVuZ3RoIiwid2VyayIsImlkIiwiZGF0YXNldCIsImNoYXJ0UGF0aCIsInNyYyIsInBhdGhzIiwic2luZ2xlIiwiZG91YmxlIiwiZGltZW5zaW9ucyIsIkpTT04iLCJwYXJzZSIsInNpemUiLCJ2aWV3cG9ydFdpZHRoIiwicGFyZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwicHltUGFyZW50Iiwid2lkdGgiLCJzdHlsZSIsIlBhcmVudCIsImNsYXNzTGlzdCIsImFkZCJdLCJtYXBwaW5ncyI6Ijs7QUFFQTs7Ozs7O0FBRUEsSUFBTUEsUUFBUUMsU0FBU0MsZ0JBQVQsQ0FBMEIsWUFBMUIsQ0FBZCxDLENBSkE7QUFDQTs7O0FBS0EsS0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILE1BQU1JLE1BQTFCLEVBQWtDRCxHQUFsQyxFQUF1QztBQUNyQyxNQUFNRSxPQUFPTCxNQUFNRyxDQUFOLENBQWI7QUFDQSxNQUFNRyxLQUFLRCxLQUFLRSxPQUFMLENBQWFELEVBQXhCO0FBQ0EsTUFBTUUsWUFBWUgsS0FBS0UsT0FBTCxDQUFhRSxHQUEvQjtBQUNBLE1BQU1DLFFBQVE7QUFDWkMsaUJBQVdILFNBQVgsR0FBdUJGLEVBQXZCLGlCQURZO0FBRVpNLGlCQUFXSixTQUFYLEdBQXVCRixFQUF2QjtBQUZZLEdBQWQ7QUFJQSxNQUFNTyxhQUFhQyxLQUFLQyxLQUFMLENBQVdWLEtBQUtFLE9BQUwsQ0FBYU0sVUFBeEIsQ0FBbkI7QUFDQSxNQUFNRyxPQUFPWCxLQUFLRSxPQUFMLENBQWFTLElBQTFCO0FBQ0EsTUFBTUMsZ0JBQWdCWixLQUFLYSxhQUFMLENBQW1CQyxXQUF6QztBQUNBLE1BQUlDLGtCQUFKO0FBQ0E7QUFDQSxNQUFJZixLQUFLSCxnQkFBTCxDQUFzQixRQUF0QixFQUFnQ0UsTUFBaEMsR0FBeUMsQ0FBN0MsRUFBZ0Q7QUFDOUM7QUFDQSxRQUFJWSxTQUFTLFFBQWIsRUFBdUI7QUFDckIsVUFBSUMsZ0JBQWdCSixXQUFXRCxNQUFYLENBQWtCUyxLQUF0QyxFQUE2QztBQUMzQ2hCLGFBQUtpQixLQUFMLENBQVdELEtBQVgsR0FBbUIsTUFBbkI7QUFDQUQsb0JBQVksSUFBSSxjQUFJRyxNQUFSLENBQWVsQixLQUFLQyxFQUFwQixFQUF3QkksTUFBTUUsTUFBOUIsRUFBc0MsRUFBdEMsQ0FBWjtBQUNELE9BSEQsTUFHTztBQUNMUCxhQUFLaUIsS0FBTCxDQUFXRCxLQUFYLEdBQXNCUixXQUFXRixNQUFYLENBQWtCVSxLQUF4QztBQUNBRCxvQkFBWSxJQUFJLGNBQUlHLE1BQVIsQ0FBZWxCLEtBQUtDLEVBQXBCLEVBQXdCSSxNQUFNQyxNQUE5QixFQUFzQyxFQUF0QyxDQUFaO0FBQ0E7QUFDQSxZQUFJTSxnQkFBaUJKLFdBQVdGLE1BQVgsQ0FBa0JVLEtBQWxCLEdBQTBCLElBQS9DLEVBQXNEO0FBQ3BEaEIsZUFBS21CLFNBQUwsQ0FBZUMsR0FBZixDQUFtQixTQUFuQjtBQUNEO0FBQ0Y7QUFDSDtBQUNDLEtBYkQsTUFhTztBQUNMcEIsV0FBS2lCLEtBQUwsQ0FBV0QsS0FBWCxHQUFzQlIsV0FBV0YsTUFBWCxDQUFrQlUsS0FBeEM7QUFDQUQsa0JBQVksSUFBSSxjQUFJRyxNQUFSLENBQWVsQixLQUFLQyxFQUFwQixFQUF3QkksTUFBTUMsTUFBOUIsRUFBc0MsRUFBdEMsQ0FBWjtBQUNBO0FBQ0EsVUFBSU0sZ0JBQWlCSixXQUFXRixNQUFYLENBQWtCVSxLQUFsQixHQUEwQixJQUEvQyxFQUFzRDtBQUNwRGhCLGFBQUttQixTQUFMLENBQWVDLEdBQWYsQ0FBbUIsU0FBbkI7QUFDRDtBQUNGO0FBQ0Y7QUFDRiIsImZpbGUiOiJtYWluLWVtYmVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVXNlcyBQT0xJVElDTyBmb3JrIG9mIHB5bS5qczogaHR0cHM6Ly9naXRodWIuY29tL1RoZS1Qb2xpdGljby9weW0uanNcbi8vIENoZWNrcyBmb3IgZXhpc3RlbmNlIG9mIHB5bSBiZWZvcmUgc2V0dGluZyBnbG9iYWwuXG5pbXBvcnQgcHltIGZyb20gJ3B5bS5qcyc7XG5cbmNvbnN0IHdlcmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNoYXJ0d2VyaycpO1xuXG5mb3IgKGxldCBpID0gMDsgaSA8IHdlcmtzLmxlbmd0aDsgaSsrKSB7XG4gIGNvbnN0IHdlcmsgPSB3ZXJrc1tpXTtcbiAgY29uc3QgaWQgPSB3ZXJrLmRhdGFzZXQuaWQ7XG4gIGNvbnN0IGNoYXJ0UGF0aCA9IHdlcmsuZGF0YXNldC5zcmM7XG4gIGNvbnN0IHBhdGhzID0ge1xuICAgIHNpbmdsZTogYCR7Y2hhcnRQYXRofSR7aWR9X3NpbmdsZS5odG1sYCxcbiAgICBkb3VibGU6IGAke2NoYXJ0UGF0aH0ke2lkfS5odG1sYCxcbiAgfTtcbiAgY29uc3QgZGltZW5zaW9ucyA9IEpTT04ucGFyc2Uod2Vyay5kYXRhc2V0LmRpbWVuc2lvbnMpO1xuICBjb25zdCBzaXplID0gd2Vyay5kYXRhc2V0LnNpemU7XG4gIGNvbnN0IHZpZXdwb3J0V2lkdGggPSB3ZXJrLnBhcmVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIGxldCBweW1QYXJlbnQ7XG4gIC8vIENoZWNrIGlmIGlmcmFtZSBhbHJlYWR5IGVtYmVkZGVkLiAoSGFuZGxlcyBmb3IgbXVsdGlwbGUgZW1iZWRkZWQgY2hhcnRzLi4uKVxuICBpZiAod2Vyay5xdWVyeVNlbGVjdG9yQWxsKCdpZnJhbWUnKS5sZW5ndGggPCAxKSB7XG4gICAgLy8gZG91YmxlLXdpZGVcbiAgICBpZiAoc2l6ZSA9PT0gJ2RvdWJsZScpIHtcbiAgICAgIGlmICh2aWV3cG9ydFdpZHRoID4gZGltZW5zaW9ucy5kb3VibGUud2lkdGgpIHtcbiAgICAgICAgd2Vyay5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgcHltUGFyZW50ID0gbmV3IHB5bS5QYXJlbnQod2Vyay5pZCwgcGF0aHMuZG91YmxlLCB7fSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3ZXJrLnN0eWxlLndpZHRoID0gYCR7ZGltZW5zaW9ucy5zaW5nbGUud2lkdGh9cHhgO1xuICAgICAgICBweW1QYXJlbnQgPSBuZXcgcHltLlBhcmVudCh3ZXJrLmlkLCBwYXRocy5zaW5nbGUsIHt9KTtcbiAgICAgICAgLy8gQWRkIGEgY2xhc3Mgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZmxvYXQgZGl2XG4gICAgICAgIGlmICh2aWV3cG9ydFdpZHRoID4gKGRpbWVuc2lvbnMuc2luZ2xlLndpZHRoICogMS43NSkpIHtcbiAgICAgICAgICB3ZXJrLmNsYXNzTGlzdC5hZGQoJ2Zsb2F0ZWQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIC8vIHNpbmdsZS13aWRlXG4gICAgfSBlbHNlIHtcbiAgICAgIHdlcmsuc3R5bGUud2lkdGggPSBgJHtkaW1lbnNpb25zLnNpbmdsZS53aWR0aH1weGA7XG4gICAgICBweW1QYXJlbnQgPSBuZXcgcHltLlBhcmVudCh3ZXJrLmlkLCBwYXRocy5zaW5nbGUsIHt9KTtcbiAgICAgIC8vIEFkZCBhIGNsYXNzIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZsb2F0IGRpdlxuICAgICAgaWYgKHZpZXdwb3J0V2lkdGggPiAoZGltZW5zaW9ucy5zaW5nbGUud2lkdGggKiAxLjc1KSkge1xuICAgICAgICB3ZXJrLmNsYXNzTGlzdC5hZGQoJ2Zsb2F0ZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ=="]}